
lib/cJSON.c,3461
    #define INTEGER_SIZE 38,1403
    #define INTEGER_SIZE 41,1481
    #define INTEGER_SIZE 44,1568
typedef int cjbool;50,1704
#define true 51,1724
#define false 52,1749
static const char *global_ep global_ep54,1776
const char *cJSON_GetErrorPtr(cJSON_GetErrorPtr56,1814
extern const char* cJSON_Version(61,1877
static int cJSON_strcasecmp(70,2098
static char* cJSON_strdup(94,2643
void cJSON_InitHooks(114,2940
static cJSON *cJSON_New_Item(cJSON_New_Item129,3269
void cJSON_Delete(141,3483
static const char *parse_number(parse_number165,4063
static int pow2gt 235,5527
    char *buffer;buffer257,5864
    int length;258,5882
    int offset;259,5898
    cjbool noalloc;260,5914
} printbuffer;261,5934
static char* ensure(264,6026
static int update(304,6808
static char *print_number(print_number317,7067
static unsigned parse_hex4(392,8774
static const unsigned char firstByteMark[firstByteMark478,10336
static const char *parse_string(parse_string490,10616
static char *print_string_ptr(print_string_ptr668,16259
static char *print_string(print_string814,19465
static const char *skip(skip828,20158
cJSON *cJSON_ParseWithOpts(cJSON_ParseWithOpts839,20352
cJSON *cJSON_Parse(cJSON_Parse879,21321
char *cJSON_Print(cJSON_Print885,21461
char *cJSON_PrintUnformatted(cJSON_PrintUnformatted890,21542
char *cJSON_PrintBuffered(cJSON_PrintBuffered895,21634
int cJSON_PrintPreallocated(910,21939
static const char *parse_value(parse_value921,22241
static char *print_value(print_value969,23247
static const char *parse_array(parse_array1072,26053
static char *print_array(print_array1139,27448
static const char *parse_object(parse_object1308,31275
static char *print_object(print_object1403,33298
int    cJSON_GetArraySize(1684,39643
cJSON *cJSON_GetArrayItem(cJSON_GetArrayItem1696,39811
cJSON *cJSON_GetObjectItem(cJSON_GetObjectItem1708,40006
cjbool cJSON_HasObjectItem(1718,40225
static void suffix_object(1724,40392
static cJSON *create_reference(create_reference1731,40534
void   cJSON_AddItemToArray(1746,40851
void   cJSON_AddItemToObject(1769,41233
void   cJSON_AddItemToObjectCS(1787,41606
void cJSON_AddItemReferenceToArray(1805,42053
void cJSON_AddItemReferenceToObject(1810,42177
cJSON *cJSON_DetachItemFromArray(cJSON_DetachItemFromArray1815,42333
void cJSON_DeleteItemFromArray(1847,42925
cJSON *cJSON_DetachItemFromObject(cJSON_DetachItemFromObject1852,43045
void cJSON_DeleteItemFromObject(1869,43356
void cJSON_InsertItemInArray(1875,43538
void cJSON_ReplaceItemInArray(1901,44013
void cJSON_ReplaceItemInObject(1931,44551
cJSON *cJSON_CreateNull(cJSON_CreateNull1954,45112
cJSON *cJSON_CreateTrue(cJSON_CreateTrue1965,45259
cJSON *cJSON_CreateFalse(cJSON_CreateFalse1976,45406
cJSON *cJSON_CreateBool(cJSON_CreateBool1987,45555
cJSON *cJSON_CreateNumber(cJSON_CreateNumber1998,45724
cJSON *cJSON_CreateString(cJSON_CreateString2011,45949
extern cJSON *cJSON_CreateRaw(cJSON_CreateRaw2028,46272
cJSON *cJSON_CreateArray(cJSON_CreateArray2045,46590
cJSON *cJSON_CreateObject(cJSON_CreateObject2056,46737
cJSON *cJSON_CreateIntArray(cJSON_CreateIntArray2068,46910
cJSON *cJSON_CreateFloatArray(cJSON_CreateFloatArray2096,47408
cJSON *cJSON_CreateDoubleArray(cJSON_CreateDoubleArray2124,47909
cJSON *cJSON_CreateStringArray(cJSON_CreateStringArray2152,48411
cJSON *cJSON_Duplicate(cJSON_Duplicate2181,48931
void cJSON_Minify(2254,50745

lib/cJSON.h,1289
#define cJSON__h24,1111
#define CJSON_VERSION_MAJOR 32,1191
#define CJSON_VERSION_MINOR 33,1221
#define CJSON_VERSION_PATCH 34,1251
#define cJSON_False 42,1410
#define cJSON_True 43,1440
#define cJSON_NULL 44,1470
#define cJSON_Number 45,1500
#define cJSON_String 46,1530
#define cJSON_Array 47,1560
#define cJSON_Object 48,1590
#define cJSON_Raw 49,1620
#define cJSON_IsReference 51,1666
#define cJSON_StringIsConst 52,1696
typedef struct cJSON55,1756
    struct cJSON *next;next58,1897
    struct cJSON *prev;prev59,1921
    struct cJSON *child;child61,2059
    int type;64,2127
    char *valuestring;valuestring67,2216
    int valueint;69,2290
    double valuedouble;71,2359
    char *string;string74,2492
} cJSON;75,2510
typedef struct cJSON_Hooks77,2520
      void *(*malloc_fn)malloc_fn79,2549
      void (*free_fn)free_fn80,2586
} cJSON_Hooks;81,2620
#define cJSON_AddNullToObject(163,7722
#define cJSON_AddTrueToObject(164,7821
#define cJSON_AddFalseToObject(165,7920
#define cJSON_AddBoolToObject(166,8021
#define cJSON_AddNumberToObject(167,8123
#define cJSON_AddStringToObject(168,8229
#define cJSON_AddRawToObject(169,8335
#define cJSON_SetIntValue(172,8521
#define cJSON_SetNumberValue(173,8631
#define cJSON_ArrayForEach(176,8785

onvm_nflib/onvm_flow_table.h,989
#define _ONVM_FLOW_TABLE_H_42,1996
#define DEFAULT_HASH_FUNC 58,2330
#define DEFAULT_HASH_FUNC 61,2404
struct onvm_ft 64,2454
        struct rte_hash* hash;65,2471
        char* data;66,2502
        int cnt;67,2522
        int entry_size;68,2539
struct onvm_ft_ipv4_5tuple 71,2567
        uint32_t src_addr;72,2596
        uint32_t dst_addr;73,2623
        uint16_t src_port;74,2650
        uint16_t dst_port;75,2677
        uint8_t  proto;76,2704
union ipv4_5tuple_host 82,2903
                uint8_t  pad0;84,2945
                uint8_t  proto;85,2976
                uint16_t virt_port;86,3008
                uint32_t ip_src;87,3044
                uint32_t ip_dst;88,3077
                uint16_t port_src;89,3110
                uint16_t port_dst;90,3145
        __m128i xmm;92,3191
_onvm_ft_print_key(128,4115
onvm_ft_get_data(139,4692
onvm_ft_fill_key(144,4824
onvm_ft_fill_key_symmetric(173,5865
onvm_ft_ipv4_hash_crc(195,6529
onvm_softrss(222,7434

onvm_nflib/onvm_comm_utils.h,1119
#define _ONVM_COMM_UTILS_H_42,2043
#define HAS_CLOCK_GETTIME_MONOTONIC65,2665
#define USE_THIS_CLOCK 67,2708
typedef struct onvm_time_s 69,2907
  struct timespec t;71,2971
  struct timeval t;73,2998
} __rte_cache_aligned onvm_time_t;75,3025
typedef struct onvm_interval_timer_s 77,3061
        onvm_time_t ts;78,3100
        onvm_time_t tp;79,3124
} __rte_cache_aligned onvm_interval_timer_t;80,3148
#define SECOND_TO_MICRO_SECOND 95,3605
#define NANO_SECOND_TO_MICRO_SECOND(96,3657
#define MICRO_SECOND_TO_SECOND(97,3718
typedef struct stats_time_info 99,3910
        uint8_t in_read;100,3943
        onvm_time_t prev_time;101,3968
        onvm_time_t cur_time;102,3999
} __rte_cache_aligned nf_stats_time_info_t;103,4029
typedef struct stats_cycle_info 106,4098
        uint8_t in_read;107,4132
        uint64_t prev_cycles;108,4157
        uint64_t cur_cycles;109,4187
} __rte_cache_aligned stats_cycle_info_t;110,4216
#define TS_TYPE_LOGICAL 124,4680
#define TS_TYPE_SYS_CLOCK 126,4762
#define TS_TYPE_CPU_CYCLES 128,4855
#define TS_RX_PACKET_RATE 130,4888
#define USE_TS_TYPE 131,4960

onvm_nflib/onvm_pkt_helper.h,611
#define _ONVM_PKT_HELPER_H_42,1998
#define IP_PROTOCOL_TCP 53,2160
#define IP_PROTOCOL_UDP 54,2186
#define TCP_FLAGS57,2232
#define TCP_FLAG_FIN 58,2250
#define TCP_FLAG_SYN 59,2278
#define TCP_FLAG_RST 60,2306
#define TCP_FLAG_PSH 61,2334
#define TCP_FLAG_ACK 62,2362
#define TCP_FLAG_URG 63,2390
#define TCP_FLAG_ECE 65,2425
#define TCP_FLAG_CWR 66,2453
#define TCP_FLAG_NS 67,2481
#define SUPPORTS_IPV4_CHECKSUM_OFFLOAD 69,2510
#define SUPPORTS_TCP_CHECKSUM_OFFLOAD 70,2556
#define SUPPORTS_UDP_CHECKSUM_OFFLOAD 71,2601
#define ONVM_PKT_GET_FLAGS(74,2692
#define ONVM_PKT_SET_FLAGS(80,2898

onvm_nflib/onvm_images.h,2159
#define _ONVM_IMAGES_H2,23
#define NUM_IN_PKTS 4,47
#define NUM_SIZE 5,104
#define IMAGE_NUM_ELE 6,140
#define IMAGE_SIZE 7,172
#define NUM_OF_PKTS 8,203
#define IMAGE_BATCH 9,291
#define IMAGENET_OUTPUT_SIZE 10,331
#define NF_IMAGE_STATS_PERIOD_MS 11,408
#define NF_INFERENCE_PERIOD 12,471
typedef enum data_status{data_status18,580
typedef enum data_status{empty,empty18,580
typedef enum data_status{empty, occupied,18,580
typedef enum data_status{empty, occupied, ready}ready18,580
typedef enum data_status{empty, occupied, ready} data_status;18,580
typedef struct __attribute__ ((__packed__)) data_struct{data_struct19,755
  int file_id;20,812
  int position;21,827
  int number_of_elements;22,843
}data_struct;data_struct24,904
typedef struct image_data{image_data32,1117
  int image_id;33,1144
  int batch_size;34,1189
  float image_data_arr[image_data_arr35,1237
  float output[output36,1367
  int output_size;37,1471
  int data_per_image[data_per_image38,1517
  int image_ready[image_ready39,1615
  float stats[stats41,1687
  struct timespec timestamps[timestamps42,1766
  int num_data_points_stored;43,2026
  data_status status;44,2133
} image_data;45,2254
typedef struct image_data_netml{image_data_netml48,2318
  void* image_data_ptrs[image_data_ptrs50,2447
  int num_packets_arrived;53,2780
  void *gpu_pointer;gpu_pointer54,2886
}image_data_netml;image_data_netml55,2972
typedef struct image_batch_netml{image_batch_netml58,3042
  int batch_id;59,3076
  image_data_netml *images[images60,3118
  int num_images_in_batch;61,3191
  void *gpu_pointer_batch;gpu_pointer_batch62,3263
  cudaStream_t cuda_stream_batch;63,3339
  int num_of_slots_empty;64,3413
}image_batch_netml;image_batch_netml65,3496
typedef struct gpu_data_allocator{gpu_data_allocator68,3551
  float *gpu_buffer;gpu_buffer69,3586
  float *gpu_buffer_sections[gpu_buffer_sections70,3642
  int free_image_in_each_section[free_image_in_each_section71,3776
  int which_batch_owns_the_section[which_batch_owns_the_section72,3884
  struct onvm_nf_info *nf_info;nf_info77,4130
int gpu_finish_work_flag;85,4311

onvm_nflib/onvm_nflib_internal.h,2067
#define _ONVM_NFLIB_INTERNAL_H_53,2288
#define NF_PKT_BATCH_SIZE 83,3084
#define RTDSC_CYCLE_COST 86,3222
#define ENABLE_TIMER_BASED_NF_CYCLE_COMPUTATION96,3663
#define ENABLE_STATIC_ID 99,3775
#define ENABLE_LOCAL_LATENCY_PROFILER 102,3920
#define NF_STATS_PERIOD_IN_MS 111,4287
#define MEMCPY_SIZE 116,4429
#define TEST_MEMCPY_MODE_PER_PACKET117,4462
#define TEST_MEMCPY_MODE_PER_BATCH119,4534
struct port_info *ports;ports125,4758
static struct rte_ring *mgr_msg_ring;mgr_msg_ring128,4825
static struct rte_ring *nf_msg_ring;nf_msg_ring131,4900
static struct rte_ring *tx_ring,tx_ring134,4992
static struct rte_ring *tx_ring, *rx_ring;rx_ring134,4992
static struct rte_ring *tx_sring,tx_sring137,5069
static struct rte_ring *tx_sring, *rx_sring;rx_sring137,5069
static struct rte_ring *mgr_rsp_ring;mgr_rsp_ring142,5203
struct onvm_nf *nfs nfs146,5304
struct onvm_nf *this_nf this_nf147,5367
uint16_t **services;services150,5514
uint16_t *nf_per_service_count;nf_per_service_count151,5535
static struct rte_mempool *nf_info_mp;nf_info_mp157,5669
static struct rte_mempool *nf_msg_pool;nf_msg_pool160,5749
static struct rte_mempool *pktmbuf_pool;pktmbuf_pool163,5817
static uint16_t initial_instance_id 166,5917
static uint16_t service_id 170,5995
static uint8_t keep_running 174,6087
struct onvm_service_chain *default_chain;default_chain179,6173
uint64_t counter 184,6302
static rte_atomic16_t * flag_p;189,6607
static sem_t *mutex;mutex194,6725
struct rte_timer stats_timer;199,6844
onvm_interval_timer_t ts,203,6961
onvm_interval_timer_t ts, g_ts;203,6961
void *base_memory base_memory207,7061
pkt_handler_func pkt_hdl_func 212,7216
callback_handler_func cb_func 213,7254
#define ONVM_NO_CALLBACK 214,7292
#define YEILD_DUE_TO_EXPLICIT_REQ 281,8758
#define YIELD_DUE_TO_EMPTY_RX_RING 282,8798
#define YIELD_DUE_TO_FULL_TX_RING 283,8838
void *pReplicaStateMempool pReplicaStateMempool298,9308
dirty_mon_state_map_tbl_t *dirty_state_map dirty_state_map307,9609
uint8_t SV_ACCES_PER_PACKET;311,9801

onvm_nflib/histogram.h,1677
#define _HISTOGRAM_H_ 3,23
#define HIST_BUCKETS 6,127
#define HIST_RATE_MAX_VAL 8,153
#define HIST_COST_MAX_VAL 10,190
struct histogram 12,222
        uint32_t data[data14,242
        uint32_t bucket_size;15,279
        uint32_t max;16,309
        uint32_t min;17,367
        uint32_t max_val;19,425
        uint32_t min_val;20,494
        uint32_t total_count;22,562
        uint32_t running_avg;23,663
typedef struct histogram histogram_t;25,757
#define MAX_HISTOGRAM_SAMPLES 36,1179
#define MIN_SAMPLES_FOR_HISTOGRAM 37,1215
#define DISCARD_INITIAL_SAMPLES_COUNT 38,1254
typedef struct histogram_v2 41,1400
        uint32_t val[val42,1430
        uint32_t cur_index;43,1491
        uint32_t min_val;44,1554
        uint32_t max_val;45,1611
        uint32_t running_avg;46,1668
        uint32_t ewma_avg;47,1759
        histogram_t histogram;49,1815
        uint8_t is_initialized;50,1866
        uint32_t mean_val;51,1948
        uint32_t median_val;52,1996
        uint32_t mode_val;53,2046
        uint32_t perctl_val;54,2094
        uint32_t discard_mode;55,2145
}histogram_v2_t;histogram_v2_t57,2232
typedef enum HIST_VAL_TYPE 58,2249
        VAL_TYPE_RUNNING_AVG 59,2278
        VAL_TYPE_MEAN 60,2311
        VAL_TYPE_MEDIAN 61,2337
        VAL_TYPE_MODE 62,2365
        VAL_TYPE_ABS_MIN 63,2391
        VAL_TYPE_ABS_MAX 64,2421
        VAL_TYPE_25_PERCENTILE=65,2450
        VAL_TYPE_50_PERCENTILE=66,2484
        VAL_TYPE_50_PERCENTILE=VAL_TYPE_MEDIAN,66,2484
        VAL_TYPE_75_PERCENTILE=67,2532
        VAL_TYPE_90_PERCENTILE=68,2566
        VAL_TYPE_99_PERCENTILE=69,2600
}HIST_VAL_TYPE_E;HIST_VAL_TYPE_E70,2634

onvm_nflib/onvm_pkt_helper.c,991
onvm_pkt_mac_addr_swap(59,2270
onvm_pkt_set_mac_addr(87,2906
onvm_pkt_swap_src_mac_addr(110,3597
onvm_pkt_swap_dst_mac_addr(137,4331
onvm_pkt_ether_hdr(164,5075
onvm_pkt_tcp_hdr(172,5271
onvm_pkt_udp_hdr(188,5810
onvm_pkt_ipv4_hdr(204,6350
onvm_pkt_vlan_hdr(225,7314
onvm_pkt_is_tcp(237,7680
onvm_pkt_is_udp(242,7773
onvm_pkt_is_ipv4(247,7866
onvm_pkt_print(253,7963
onvm_pkt_print_tcp(271,8419
onvm_pkt_print_udp(302,9905
onvm_pkt_print_ipv4(310,10200
void onvm_pkt_print_ether(345,11903
onvm_pkt_parse_ip(391,13747
onvm_pkt_parse_mac(408,14132
onvm_pkt_get_checksum_offload_flags(428,14624
calculate_tcpudp_cksum(452,15476
                uint32_t saddr;458,15725
                uint32_t daddr;459,15757
                uint8_t reserved;460,15789
                uint8_t protocol;461,15839
                uint16_t total_length;462,15873
calculate_ip_cksum(488,16628
onvm_pkt_set_checksums(494,16810
onvm_tcp_con_close(542,18901
onvm_tcp_ack_close(554,19231

onvm_nflib/onvm_nflib.c,3205
#define NF_MODE_UNKNOWN 77,2859
#define NF_MODE_SINGLE 78,2885
#define NF_MODE_RING 79,2910
#define ONVM_NO_CALLBACK 81,2934
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT84,2966
#define __DEBUG__NDSYNC_LOGS__85,3021
onvm_interval_timer_t nd_ts;89,3137
int64_t max_nd,90,3166
int64_t max_nd, min_nd,90,3166
int64_t max_nd, min_nd, avg_nd,90,3166
int64_t max_nd, min_nd, avg_nd, delta_nd;90,3166
static inline void allocate_base_memory(98,3467
static inline void do_memcopy(101,3564
nf_explicit_callback_function nf_ecb 109,3843
static uint8_t need_ecb 110,3888
void register_explicit_callback_function(111,3917
gpu_message_processing_func nf_gpu_func;124,4459
void register_gpu_msg_handling_function(125,4500
uint32_t get_nf_core_id(151,5409
int set_cgroup_cpu_share(155,5475
void init_cgroup_info(171,6199
typedef struct pal_packet 201,7505
        uint64_t pal_counter;202,7533
        uint64_t pal_info;203,7563
}pal_packet_t;pal_packet_t204,7590
static inline int send_packets_out(205,7605
int generate_and_transmit_pals_for_batch(225,8541
stats_timer_cb(301,12347
init_nflib_timers(314,12842
void onvm_nf_yeild(331,13605
static inline void  onvm_nf_wake_notify(365,14712
static inline void onvm_nflib_implicit_wakeup(374,14994
static inline void start_ppkt_processing_cost(382,15233
static inline void end_ppkt_processing_cost(387,15473
onvm_nflib_wait_till_notification(418,16927
static inline void onvm_nflib_check_and_wait_if_interrupted(437,17885
static inline void onvm_nflib_handle_tx_shadow_ring(454,18788
static inline void synchronize_replica_nf_state_memory(486,20476
static inline void update_processed_packet_ts(530,22491
static inline int onvm_nflib_fetch_packets(555,23773
inline int onvm_nflib_post_process_packets_batch(590,25458
static inline int onvm_nflib_process_packets_batch(688,30989
onvm_nflib_run_callback(788,34656
onvm_nflib_run(855,37235
onvm_nflib_return_pkt(861,37392
onvm_nflib_return_pkt_bulk(878,37948
onvm_nflib_stop(893,38552
onvm_nflib_init(898,38672
onvm_nflib_drop_pkt(1034,43670
void notify_for_ecb(1040,43800
onvm_nflib_handle_msg(1051,44000
onvm_nflib_dequeue_messages(1127,47277
onvm_nflib_info_init(1139,47798
onvm_nflib_usage(1186,49412
onvm_nflib_parse_args(1196,49628
onvm_nflib_handle_signal(1257,51606
onvm_nflib_cleanup(1269,51905
onvm_nflib_notify_ready(1310,53598
void initialize_gpu(1364,55763
        int64_t ttl_elapsed 1387,56482
static void get_batch_agg_and_dev_buffer_mempool(1430,58010
void onvm_send_gpu_msg_to_mgr(1470,59578
void load_ml_file(1489,60190
void evaluate_the_image(1516,61120
void evaluate_an_image_from_mempool(1523,61522
void gpu_image_callback_function(1614,66621
static int get_image_index(1673,68789
static image_data *get_image(get_image1684,69001
 static void delete_image(1706,69778
void copy_data_to_image(1718,70152
static inline void copy_data_to_image_batch(1742,71376
void initialize_ml_timers(1779,73201
void compute_ml_stats(1793,73780
void prepare_to_restart(1812,74762
void execute_dummy_image(1824,75291
onvm_nflib_start_nf(1841,75975
static void set_cpu_sched_policy_and_mode(1927,79883
init_shared_cpu_info(1938,80164

onvm_nflib/onvm_comm_utils.c,1169
  struct timespec start,52,2273
  struct timespec start, stop;52,2273
  struct timespec gstart,53,2304
  struct timespec gstart, gstop;53,2304
  struct timeval start,55,2343
  struct timeval start, stop;55,2343
  struct timeval gstart,56,2373
  struct timeval gstart, gstop;56,2373
inline int onvm_util_get_cur_time(60,2414
inline int onvm_util_get_start_time(76,2817
inline int onvm_util_get_stop_time(91,3217
inline int64_t onvm_util_get_elapsed_time(106,3616
inline int64_t onvm_util_get_diff_time_now(118,4066
inline unsigned long onvm_util_get_difftime_us(131,4503
uint64_t onvm_util_get_current_cpu_cycles(143,4944
uint64_t onvm_util_get_diff_cpu_cycles(148,5043
uint64_t onvm_util_get_diff_cpu_cycles_in_us(156,5229
uint64_t onvm_util_get_elapsed_cpu_cycles(164,5465
uint64_t onvm_util_get_elapsed_cpu_cycles_in_us(169,5627
uint64_t gPkts=174,5828
#define USE_DISTINCT_FIELDS177,5892
int onvm_util_mark_timestamp_on_RX_packets(180,5937
    uint64_t total_cycles;206,6850
    uint64_t total_pkts;207,6877
} latency_numbers;208,6902
int onvm_util_calc_chain_processing_latency(210,6931
int onvm_util_get_marked_packet_timestamp(268,9253

onvm_nflib/onvm_netml.h,1412
#define _ONVM_NETML_H2,22
#define MAX_CHUNKS_PER_IMAGE 3,44
#define MAX_IMAGES_BATCH_SIZE 4,78
#define SIZE_OF_AN_IMAGE_BYTES 5,111
#define IMAGE_BATCH_DEV_BUFFER_SIZE 6,168
typedef struct chunk_info_t8,316
  size_t start_offset;10,346
  size_t size_in_bytes;11,369
}chunk_info_t;chunk_info_t12,393
typedef struct image_chunk_header_t{image_chunk_header_t15,458
  uint8_t image_id;16,495
  chunk_info_t image_chunk;17,515
}image_chunk_header_t;image_chunk_header_t18,543
typedef struct chunk_copy_info_t{chunk_copy_info_t21,608
  void *src_cpy_ptr;src_cpy_ptr22,642
  chunk_info_t *image_chunk;image_chunk23,663
}chunk_copy_info_t;chunk_copy_info_t24,692
typedef struct image_copy_info_t{image_copy_info_t27,764
  uint8_t image_id;28,798
  chunk_copy_info_t copy_info[copy_info29,818
} image_copy_info_t;30,871
typedef struct image_aggregation_info_t{image_aggregation_info_t34,956
  uint8_t usage_status;35,997
  size_t bytes_count;36,1132
  uint16_t packets_count;37,1154
  image_copy_info_t copy_info;38,1180
  struct rte_mbuf * image_packets[image_packets39,1211
}image_aggregation_info_t;image_aggregation_info_t40,1268
typedef struct image_batched_aggregation_info_t{image_batched_aggregation_info_t43,1337
  uint32_t ready_mask;44,1386
  image_aggregation_info_t images[images45,1409
}image_batched_aggregation_info_t;image_batched_aggregation_info_t46,1467

onvm_nflib/onvm_sort.h,709
#define _ONVM_SORT_H_3,23
typedef enum ONVM_SORT_DATA_TYPE 6,126
        ONVM_SORT_TYPE_INT 7,161
        ONVM_SORT_TYPE_UINT32 8,193
        ONVM_SORT_TYPE_UINT64 9,228
        ONVM_SORT_TYPE_CUSTOM 10,263
}ONVM_SORT_DATA_TYPE_E;ONVM_SORT_DATA_TYPE_E11,298
typedef enum ONVM_SORT_MODE 12,322
        SORT_ASCENDING 13,352
        SORT_DESCENDING 14,379
}ONVM_SORT_MODE_E;ONVM_SORT_MODE_E15,407
typedef int (*comp_func)comp_func17,427
typedef int (*comp_func_s)comp_func_s18,481
typedef struct onvm_callback_thunk 40,1450
        ONVM_SORT_DATA_TYPE_E type;41,1487
        ONVM_SORT_MODE_E mode;42,1523
        comp_func_s cf;43,1554
}onvm_callback_thunk_t;onvm_callback_thunk_t44,1578

onvm_nflib/onvm_includes.h,34
#define _ONVM_INCLUDES_H_54,2345

onvm_nflib/onvm_config_common.h,212
#define _ONVM_CONFIG_COMMON_H_42,2016
#define MAX_SERVICE_ID_SIZE 46,2068
#define PROC_TYPE_SECONDARY 50,2172
#define FLAG_N 51,2224
#define FLAG_R 52,2244
#define FLAG_L 53,2264
#define FLAG_DASH 54,2284

onvm_nflib/onvm_flow_dir.c,725
#define NO_FLAGS 53,2332
struct onvm_ft *sdn_ft;sdn_ft56,2353
struct onvm_ft **sdn_ft_p;sdn_ft_p57,2377
onvm_flow_dir_set_index(60,2410
int onvm_flow_dir_reset_entry(73,2827
onvm_flow_dir_init(85,3176
onvm_flow_dir_nf_init(107,3871
onvm_flow_dir_get_pkt(122,4185
onvm_flow_dir_add_pkt(130,4360
onvm_flow_dir_del_pkt(138,4537
onvm_flow_dir_del_and_free_pkt(155,4851
onvm_flow_dir_get_key(170,5244
onvm_flow_dir_add_key(178,5443
onvm_flow_dir_del_key(186,5645
onvm_flow_dir_del_and_free_key(203,6075
onvm_flow_dir_print_stats__old(220,6823
static inline uint32_t get_index_of_sc(265,9250
extract_active_service_chains(282,9812
onvm_flow_dir_print_stats(330,12810
onvm_flow_dir_clear_all_entries(363,14625

onvm_nflib/onvm_flow_dir.h,395
#define _ONVM_FLOW_DIR_H_42,2035
struct onvm_flow_entry 50,2183
        struct onvm_ft_ipv4_5tuple *key;key51,2208
        struct onvm_service_chain *sc;sc52,2249
        uint64_t ref_cnt;53,2288
        uint16_t idle_timeout;54,2314
        uint16_t hard_timeout;55,2345
        uint64_t packet_count;56,2376
        uint64_t byte_count;57,2407
        uint64_t entry_index;58,2436

onvm_nflib/onvm_pkt_common.c,302
onvm_pkt_process_tx_batch(96,3262
onvm_pkt_flush_all_nfs(140,5447
onvm_pkt_flush_nf_queue(151,5708
onvm_pkt_enqueue_nf(186,6823
onvm_pkt_flush_port_queue(221,7994
onvm_pkt_enqueue_tx_thread(250,8936
onvm_pkt_enqueue_port(272,9620
onvm_pkt_process_next_action(287,10069
onvm_pkt_drop(332,11733

onvm_nflib/onvm_sc_common.h,30
#define _SC_COMMON_H_42,2056

onvm_nflib/onvm_sc_mgr.c,210
active_sc_entries_t active_sc_list;49,2175
static inline int add_chain_to_active_sc_list(53,2374
const active_sc_entries_t* onvm_sc_get_all_active_chains(60,2704
onvm_sc_get(64,2830
onvm_sc_create(69,2901

onvm_nflib/onvm_pkt_common.h,36
#define _ONVM_PKT_COMMON_H_54,2310

onvm_nflib/onvm_common.h,21814
#define _COMMON_H_43,2037
#define ONVM_GPU 56,2251
#define ONVM_GPU_SAME_SIZE_PKTS 57,2270
#define ONVM_GPU_TEST 58,2304
#define ONVM_CACHE_LINE_SIZE 65,2523
#define ENABLE_HIGH_THROUGHPUT_MODE68,2678
#define ENABLE_LOW_LATENCY_MODE70,2750
#define MIN(74,2802
#define MAX(78,2860
#define ARBITER_PERIOD_IN_US 81,2906
#define MAX_NFS 83,3035
#define MAX_SERVICES 84,3102
#define MAX_NFS_PER_SERVICE 85,3185
#define RTE_MP_RX_DESC_DEFAULT 89,3344
#define RTE_MP_TX_DESC_DEFAULT 90,3452
#define NF_QUEUE_RINGSIZE 91,3636
#define RTE_MP_RX_DESC_DEFAULT 93,3803
#define RTE_MP_TX_DESC_DEFAULT 94,3916
#define NF_QUEUE_RINGSIZE 95,4029
#define RTE_MP_RX_DESC_DEFAULT 97,4160
#define RTE_MP_TX_DESC_DEFAULT 98,4267
#define NF_QUEUE_RINGSIZE 99,4374
#define ONVM_PACKETS_BATCH_SIZE 102,4508
#define PACKET_READ_SIZE 103,4596
#define NF_MSG_QUEUE_SIZE 104,4647
#define ONVM_NUM_RX_THREADS 107,4763
#define ONVM_NUM_TX_THREADS 108,4800
#define ONVM_NUM_MGR_AUX_THREADS 109,4837
#define ONVM_MAX_CHAIN_LENGTH 111,4942
#define SDN_FT_ENTRIES 112,5010
#define ONVM_NF_ACTION_DROP 115,5105
#define ONVM_NF_ACTION_NEXT 116,5152
#define ONVM_NF_ACTION_TONF 117,5269
#define ONVM_NF_ACTION_OUT 118,5383
#define ONVM_NF_ACTION_TO_NF_INSTANCE 119,5477
#define ONVM_ENABLE_SPEACILA_NF126,6011
#define INTERRUPT_SEM129,6127
#define ENABLE_NF_TX_STAT_LOGS138,6402
#define ENABLE_PORT_TX_STATS_LOGS141,6482
#define ENABLE_SYNC_MGR_TO_NF_MSG144,6589
#define PROFILE_PACKET_PROCESSING_LATENCY176,7557
#define ONVM_SPECIAL_NF_SERVICE_ID 185,7925
#define ONVM_SPECIAL_NF_INSTANCE_ID 187,8001
#define ENABLE_PCAP_CAPTURE_ON_OUTPUT197,8477
#define USE_SEMAPHORE 210,8863
#define NF_LOCAL_BACKPRESSURE 213,9024
#define ENABLE_CGROUPS_FEATURE 219,9275
#define ENABLE_NFV_RESL 222,9387
#define ENABLE_FT_INDEX_IN_META 225,9515
#define ENABLE_NF_WAKE_NOTIFICATION_COUNTER228,9639
#define ENABLE_NF_YIELD_NOTIFICATION_COUNTER229,9683
#define USE_POLL_MODE234,9767
#define ENABLE_USE_RTE_TIMER_MODE_FOR_MAIN_THREAD 245,10151
#define BOTTLENECK_NF_STATUS_RESET 262,10978
#define BOTTLENECK_NF_STATUS_WAIT_ENQUEUED 263,11030
#define BOTTLENECK_NF_STATUS_DROP_MARKED 264,11082
#define NF_BACKPRESSURE_APPROACH_1 270,11382
#define NF_BACKPRESSURE_APPROACH_2 274,11565
#define ENABLE_RING_WATERMARK278,11787
#define ENABLE_NF_BASED_BKPR_MARKING 282,12047
#define USE_BKPR_V2_IN_TIMER_MODE 309,13806
#define DROP_PKTS_ONLY_AT_RX_ENQUEUE 315,14160
#define ENABLE_SAVE_BACKLOG_FT_PER_NF 319,14314
#define BACKPRESSURE_USE_RING_BUFFER_MODE 321,14501
#define USE_CGROUPS_PER_NF_INSTANCE348,16074
#define ENABLE_DYNAMIC_CGROUP_WEIGHT_ADJUSTMENT351,16189
#define USE_DYNAMIC_LOAD_FACTOR_FOR_CPU_SHARE354,16319
#define STORE_HISTOGRAM_OF_NF_COMPUTATION_COST357,16483
#define ETHER_TYPE_RSYNC_DATA 375,17336
#define ETHER_TYPE_BFD 376,17376
#define ENABLE_NF_MGR_IDENTIFIER 379,17440
#define ENABLE_BFD 380,17514
#define ENABLE_PER_SERVICE_MEMPOOL 382,17664
#define ENABLE_REPLICA_STATE_UPDATE 383,17758
#define ENABLE_REMOTE_SYNC_WITH_TX_LATCH 384,17895
#define RESL_UPDATE_MODE_PER_BATCH 387,18188
#define ENABLE_ND_MARKING_IN_NFS 388,18303
#define ENABLE_PER_FLOW_TS_STORE 392,18435
#define ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 393,18593
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 394,18736
#define PRIMARY_NODE 396,18908
#define SECONDARY_NODE 397,18937
#define PREDECESSOR_NODE 398,18966
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 416,19819
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 417,19905
#undef ENABLE_REPLICA_STATE_UPDATE442,21311
#undef ENABLE_REMOTE_SYNC_WITH_TX_LATCH443,21346
#undef ENABLE_PER_FLOW_TS_STORE444,21386
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION445,21418
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT446,21461
#define SHADOW_RING_UPDATE_PER_PKT451,21585
#define SHADOW_RING_UPDATE_PER_BATCH453,21626
#define PER_FLOW_TS_UPDATE_PER_PKT463,21900
#define PER_FLOW_TS_UPDATE_PER_BATCH465,21941
#define REPLICA_STATE_UPDATE_MODE_PER_PACKET472,22070
#define REPLICA_STATE_UPDATE_MODE_PER_BATCH474,22121
#define ONVM_NUM_RSYNC_THREADS 479,22220
#define ONVM_NUM_RSYNC_PORTS 480,22260
#define USE_BATCHED_RSYNC_TRANSACTIONS 481,22343
#define ENABLE_RSYNC_WITH_DOUBLE_BUFFERING_MODE 484,22736
#define _TX_RSYNC_TX_PORT_RING_NAME 486,22944
#define TX_RSYNC_TX_PORT_RING_SIZE 487,23030
#define _TX_RSYNC_TX_LATCH_RING_NAME 488,23163
#define TX_RSYNC_TX_LATCH_RING_SIZE 489,23250
#define _TX_RSYNC_NF_LATCH_RING_NAME 490,23325
#define TX_RSYNC_NF_LATCH_RING_SIZE 491,23412
#define _TX_RSYNC_TX_LATCH_DB_RING_NAME 494,23533
#define _TX_RSYNC_NF_LATCH_DB_RING_NAME 495,23626
#define TX_RSYNC_TX_LATCH_DB_RING_SIZE 496,23719
#define TX_RSYNC_NF_LATCH_DB_RING_SIZE 497,23789
#define ENABLE_RSYNC_MULTI_BUFFERING 500,24051
#define TX_RSYNC_AUTOCLEAR_ELAPSED_TRANSACTIONS_TIMERS 502,24288
#define USE_BATCHED_RSYNC_TRANSACTIONS505,24474
#define ONVM_NUM_RSYNC_THREADS 509,24533
#define _NF_STATE_MEMPOOL_NAME 512,24581
#define _NF_STATE_SIZE 513,24631
#define _NF_STATE_CACHE 514,24669
#define CLIENT_SHADOW_RING_SIZE 517,24729
#define _SERVICE_STATE_MEMPOOL_NAME 521,24857
#define _SERVICE_STATE_SIZE 522,24913
#define _SERVICE_STATE_CACHE 523,24995
#define _PER_FLOW_TS_MEMPOOL_NAME 527,25072
#define _PER_FLOW_TS_SIZE 528,25122
#define _PER_FLOW_TS_CACHE 529,25277
#define _PER_FLOW_TS_CACHE_MAX_ENTRIES 530,25312
#define MAX_ACTIVE_CLIENTS 534,25404
#define MAX_STANDBY_CLIENTS 535,25445
#define ACTIVE_NF_MASK 536,25505
typedef struct onvm_per_flow_ts_info 538,25554
        uint64_t ts;539,25593
}  __attribute__((__packed__)) onvm_per_flow_ts_info_t;540,25614
#define ONVM_NUM_RSYNC_THREADS 543,25707
#define PIGGYBACK_BFD_ON_ACTIVE_PORT_TRAFFIC 549,25946
#define BFD_TX_PORT_QUEUE_ID 550,26160
#define BFD_TX_PORT_QUEUE_ID 552,26241
#define RSYNC_TX_PORT_QUEUE_ID_0 557,26403
#define RSYNC_TX_PORT_QUEUE_ID_1 559,26486
#define RSYNC_TX_OUT_PORT 560,26551
#define ONVM_NF_MGR_TX_QUEUES 561,26587
#define ONVM_NF_MGR_TX_QUEUES 563,26654
#define PRIMARY_OUT_PORT 567,26766
#define SECONDARY_OUT_PORT 568,26798
typedef struct dirty_mon_state_map_tbl 580,27514
        uint64_t dirty_index;581,27555
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t583,27639
typedef struct dirty_mon_state_map_tbl_txts 585,27668
        uint8_t dirty_index;586,27714
}dirty_mon_state_map_tbl_txts_t;dirty_mon_state_map_tbl_txts_t588,27797
#define DISTRIBUTED_NIC_PORT 599,28373
#define SET_BIT(606,28793
static inline void set_bit(607,28842
#define CLEAR_BIT(611,28930
static inline void clear_bit(612,28984
#define TOGGLE_BIT(616,29077
static inline void toggle_bit(617,29131
#define TEST_BIT(620,29221
static inline long test_bit(621,29272
static inline long is_upstream_NF(625,29367
static inline long is_immediate_upstream_NF(640,30234
static inline long get_index_of_highest_set_bit(652,30900
#define ONVM_CHECK_BIT(662,31298
#define ONVM_SET_BIT(663,31356
#define ONVM_CLEAR_BIT(664,31410
struct onvm_pkt_meta 668,31600
        uint8_t action;669,31623
        uint8_t destination;670,31676
        uint8_t src;671,31728
        uint8_t chain_index;672,31785
        uint16_t ft_index;674,31899
	uint8_t flags;676,32003
        uint8_t reserved_word;677,32109
#define NF_NEED_ND_SYNC 680,32293
#define NF_BYPASS_RSYNC 681,32324
static inline struct onvm_pkt_meta* onvm_get_pkt_meta(683,32356
static inline uint8_t onvm_get_pkt_chain_index(687,32490
struct packet_buf 707,33359
        struct rte_mbuf *buffer[buffer708,33379
        uint16_t count;709,33430
struct tx_thread_info 717,33596
        unsigned first_nf;718,33620
        unsigned last_nf;719,33647
        struct packet_buf *port_tx_bufs;port_tx_bufs720,33673
struct queue_mgr 727,33821
        unsigned id;728,33840
        enum {NF,NF729,33861
        enum {NF, MGR}MGR729,33861
        enum {NF, MGR} mgr_type_t;729,33861
                struct tx_thread_info *tx_thread_info;tx_thread_info731,33912
                struct packet_buf *to_tx_buf;to_tx_buf732,33967
        struct packet_buf *nf_rx_bufs;nf_rx_bufs734,34024
struct rx_stats{rx_stats737,34067
        uint64_t rx[rx738,34084
struct tx_stats{tx_stats742,34128
        uint64_t tx[tx743,34145
        uint64_t tx_drop[tx_drop744,34184
struct port_info 748,34233
        uint8_t num_ports;749,34252
        uint8_t id[id750,34279
        struct ether_addr mac[mac751,34317
        uint8_t down_status[down_status752,34366
        volatile struct rx_stats rx_stats;753,34449
        volatile struct tx_stats tx_stats;754,34492
struct thread_info 762,34757
       unsigned queue_id;763,34778
       unsigned first_cl;764,34804
       unsigned last_cl;765,34846
       struct packet_buf *nf_rx_buf;nf_rx_buf770,35139
       struct packet_buf *port_tx_buf;port_tx_buf771,35176
       struct packet_buf *port_tx_direct_buf;port_tx_direct_buf773,35258
typedef int(*pkt_handler_func)pkt_handler_func779,35455
typedef int(*callback_handler_func)callback_handler_func781,35642
typedef void(*advanced_rings_func)advanced_rings_func783,35790
typedef void(*setup_func)setup_func785,35940
struct onvm_nf_scale_info 788,36059
        struct onvm_nf_info *parent;parent789,36087
        uint16_t instance_id;790,36124
        uint16_t service_id;791,36154
        const char *tag;tag792,36183
        void *data;data793,36208
        setup_func setup_func;794,36228
        pkt_handler_func pkt_func;795,36259
        callback_handler_func callback_func;796,36294
        advanced_rings_func adv_rings_func;797,36339
struct wakeup_info 803,36486
        unsigned first_client;804,36507
        unsigned last_client;805,36538
        uint64_t num_wakeups;806,36568
typedef struct bottleneck_ft_data 812,36660
        uint16_t chain_index;813,36696
         struct onvm_flow_entry* bft;814,36776
}bottleneck_ft_data_t;bottleneck_ft_data_t815,36835
typedef struct bottleneck_ft_info 816,36858
        uint16_t bft_count;817,36894
        uint16_t r_h;818,36961
        uint16_t w_h;819,37023
        uint16_t max_len;820,37086
        bottleneck_ft_data_t bft[bft822,37207
}bottlenect_ft_info_t;bottlenect_ft_info_t823,37264
struct onvm_nf 831,37420
        struct rte_ring *rx_q;rx_q832,37437
        struct rte_ring *tx_q;tx_q833,37468
        struct rte_ring *msg_q;msg_q834,37499
        struct onvm_nf_info *info;info835,37531
        uint16_t instance_id;836,37566
        uint8_t nf_mode;838,37652
        uint16_t parent;840,37721
        struct queue_mgr *nf_tx_mgr;nf_tx_mgr842,37802
        pkt_handler_func nf_pkt_function;845,37875
        callback_handler_func nf_callback_function;846,37917
        advanced_rings_func nf_advanced_rings_function;847,37969
        setup_func nf_setup_function;848,38025
                volatile uint64_t rx;859,38461
                volatile uint64_t rx_drop;860,38499
                volatile uint64_t tx;861,38542
                volatile uint64_t tx_drop;862,38580
                volatile uint64_t tx_buffer;864,38653
                volatile uint64_t tx_returned;865,38698
                volatile uint64_t act_out;866,38745
                volatile uint64_t act_tonf;867,38788
                volatile uint64_t act_drop;868,38832
                volatile uint64_t act_next;869,38876
                volatile uint64_t act_buffer;870,38920
                volatile uint64_t wakeup_count;874,39095
                volatile uint64_t yield_count;877,39219
                volatile uint64_t comp_cost;880,39314
                volatile uint64_t bkpr_drop;884,39429
                uint16_t max_rx_q_len;887,39554
                uint16_t max_tx_q_len;888,39593
                uint16_t bkpr_count;889,39632
        } stats;891,39718
        uint16_t is_bottleneck;895,39955
        onvm_time_t s_time;898,40089
        bottlenect_ft_info_t bft_list;902,40165
        const char *sem_name;sem_name907,40330
        key_t shm_key;908,40360
        rte_atomic16_t *volatile shm_server;910,40480
        sem_t *mutex;mutex913,40547
        uint8_t throttle_this_upstream_nf;917,40611
        uint64_t throttle_count;919,40752
        void *nf_state_mempool;nf_state_mempool926,41034
        void *service_state_pool;service_state_pool929,41223
        void *per_flow_ts_info;per_flow_ts_info934,41360
        struct rte_ring *rx_sq;rx_sq938,41427
        struct rte_ring *tx_sq;tx_sq939,41459
} __rte_cache_aligned;942,41530
#define NUMBER_OF_MODELS 956,41796
#define MAX_IMAGE 957,41823
typedef enum ml_platform{ml_platform958,41844
typedef enum ml_platform{cntk,cntk958,41844
typedef enum ml_platform{cntk, pytorch,958,41844
typedef enum ml_platform{cntk, pytorch, tensorrt}tensorrt958,41844
typedef enum ml_platform{cntk, pytorch, tensorrt}ml_platform;ml_platform958,41844
struct image_information{image_information960,41959
  void *image_pending[image_pending962,42033
  void *ready_images[ready_images963,42143
  int num_of_ready_images;964,42224
  int index_of_ready_image;965,42289
struct get_alternate_NF_ready{get_alternate_NF_ready967,42377
  int gpu_percentage;968,42408
typedef struct model_gpu_handles{model_gpu_handles974,42522
  int number_of_parameters;975,42556
  void *cuda_handles;cuda_handles976,42627
} model_gpu_handles;977,42682
typedef struct ml_model_info{ml_model_info981,42798
  ml_platform platform;982,42828
  int file_index;983,42880
  char model_file_path[model_file_path984,42939
  model_gpu_handles model_handles;985,42995
} ml_model_info;986,43077
typedef struct model_runtime_data{model_runtime_data989,43182
  char runtime_datafile_path[runtime_datafile_path990,43217
  int number_of_values;991,43284
  int *num_of_sm;num_of_sm992,43308
  int *runtime_percentages;runtime_percentages993,43326
  int *runtime_latency;runtime_latency994,43354
}model_runtime_data;model_runtime_data995,43378
typedef struct models_attributes{models_attributes998,43439
  model_runtime_data past_runtime_data;999,43473
}models_attributes;models_attributes1000,43546
struct gpu_file_listing{gpu_file_listing1008,43832
  ml_model_info model_info;1009,43857
  void *cpu_handle;cpu_handle1010,43972
  void *gpu_handle;gpu_handle1011,44016
  models_attributes attributes;1012,44061
typedef struct provide_gpu_model{provide_gpu_model1017,44225
  struct onvm_nf_info *nf;nf1018,44259
  char model_name[model_name1019,44286
  int model_index;1020,44309
}provide_gpu_model;provide_gpu_model1021,44328
static inline double time_difference_usec(1025,44368
struct onvm_nf_info 1042,44849
        uint16_t instance_id;1043,44871
        uint16_t service_id;1044,44901
        uint8_t status;1046,44949
        const char *tag;tag1047,45122
        void *data;data1048,45147
        pid_t pid;1049,45216
        void *nf_state_mempool;nf_state_mempool1052,45259
        void *service_state_pool;service_state_pool1054,45409
        uint32_t comp_cost;1058,45569
        uint32_t cpu_share;1062,45733
        uint32_t core_id;1063,45802
        uint32_t load;1064,45879
        uint32_t avg_load;1065,46009
        uint32_t svc_rate;1066,46080
        uint64_t exec_period;1069,46249
        uint32_t avg_svc;1072,46635
        uint32_t comp_pkts;1073,46714
        uint32_t drop_rate;1074,46923
        histogram_v2_t ht2;1079,47074
        histogram_v2_t ht2_q;1083,47173
        volatile uint8_t bNDSycn;1087,47265
        uint64_t bLastPktId;1088,47299
        int64_t max_nd,1090,47358
        int64_t max_nd, min_nd,1090,47358
        int64_t max_nd, min_nd, avg_nd,1090,47358
        int64_t max_nd, min_nd, avg_nd, delta_nd;1090,47358
  int gpu_model;1095,47439
  int gpu_percentage;1096,47480
  int ring_flag;1099,47567
  ml_model_info *model_info;model_info1101,47635
  void * ml_model_handle;1102,47684
  int user_batch_size;1103,47742
  enum ml_platform platform;1105,47802
  image_batched_aggregation_info_t *image_info;image_info1107,47860
  unsigned int number_of_pkts_outstanding;1111,48014
  unsigned int number_of_images_processed;1112,48107
  histogram_v2_t image_queueing_rate;1115,48239
  histogram_v2_t image_processing_rate;1116,48319
  histogram_v2_t end_to_end_image_processing_time;1118,48411
  histogram_v2_t image_processing_gpu_time;1119,48514
struct onvm_service_chain_entry 1128,48674
        uint16_t destination;1129,48708
        uint8_t action;1131,48784
        uint8_t service;1133,48850
struct onvm_service_chain 1137,48971
        struct onvm_service_chain_entry sc[sc1138,48999
        uint8_t chain_length;1139,49068
        uint8_t ref_cnt;1140,49098
        volatile uint8_t highest_downstream_nf_index_id;1142,49153
        uint8_t nf_instances_mapped;1144,49352
        uint8_t nf_instance_id[nf_instance_id1145,49450
#define MP_NF_RXQ_NAME 1152,49650
#define MP_NF_TXQ_NAME 1153,49690
#define _NF_MSG_QUEUE_NAME 1154,49730
#define PKTMBUF_POOL_NAME 1155,49775
#define MZ_PORT_INFO 1156,49822
#define MZ_NF_INFO 1157,49861
#define MZ_SERVICES_INFO 1158,49896
#define MZ_NF_PER_SERVICE_INFO 1159,49943
#define MZ_SCP_INFO 1160,50002
#define MZ_FTP_INFO 1161,50039
#define _MGR_MSG_QUEUE_NAME 1163,50077
#define _NF_MSG_QUEUE_NAME 1164,50147
#define _MGR_RSP_QUEUE_NAME 1165,50192
#define _NF_MEMPOOL_NAME 1166,50283
#define _NF_MSG_POOL_NAME 1167,50364
#define _NF_IMAGE_POOL_NAME 1170,50476
#define _IMAGE_STATE_POOL_NAME 1171,50561
#define _IMAGE_BATCH_AGG_POOL_NAME 1172,50657
#define _IMAGE_BATCH_DEV_BUFFER_NAME 1173,50775
#define _GPU_MODELS_POOL_NAME 1174,50879
#define SHMSZ 1179,51073
#define KEY_PREFIX 1180,51159
#define MP_CLIENT_SEM_NAME 1183,51243
#define MP_CLIENT_SEM_NAME 1186,51332
#define SAMPLING_RATE 1192,51568
#define ONVM_SPECIAL_NF 1193,51658
#define ONVM_NUM_WAKEUP_THREADS 1198,51780
#define ONVM_NUM_WAKEUP_THREADS 1200,51865
#define NF_WAITING_FOR_ID 1204,51985
#define NF_STARTING 1205,52108
#define NF_WAITING_FOR_RUN 1206,52217
#define NF_RUNNING 1207,52387
#define NF_PAUSED_BIT 1208,52455
#define NF_WT_ND_SYNC_BIT 1209,52552
#define NF_PAUSED 1210,52752
#define NF_WT_ND_SYNC 1211,52854
#define NF_STOPPED 1212,52970
#define NF_ID_CONFLICT 1213,53064
#define NF_NO_IDS 1214,53160
#define NF_NO_ID 1215,53250
#define ONVM_NF_HANDLE_TX 1216,53270
get_rx_queue_name(1222,53465
get_tx_queue_name(1239,54007
get_msg_queue_name(1254,54552
#define MP_NF_RXSQ_NAME 1265,54932
#define MP_NF_TXSQ_NAME 1266,54975
get_rx_squeue_name(1268,55045
get_tx_squeue_name(1275,55279
get_rsync_tx_port_ring_name(1284,55583
get_rsync_tx_tx_state_latch_ring_name(1290,55826
get_rsync_tx_nf_state_latch_ring_name(1296,56081
get_rsync_tx_tx_state_latch_db_ring_name(1303,56383
get_rsync_tx_nf_state_latch_db_ring_name(1309,56647
get_associated_active_or_standby_nf_id(1318,56922
is_primary_active_nf_id(1325,57145
is_secondary_active_nf_id(1329,57363
get_associated_active_nf_id(1333,57479
get_associated_standby_nf_id(1337,57591
   get_nf_image_state_name(1344,57768
get_image_batch_agg_name(1350,57981
get_image_dev_buffer_name(1357,58198
get_rx_shmkey(1369,58524
get_sem_name(1378,58682
#define MP_CLIENT_CGROUP_NAME 1389,59047
get_cgroup_name(1391,59112
#define MP_CLIENT_CGROUP_PATH 1397,59304
get_cgroup_path(1399,59389
#define MP_CLIENT_CGROUP_CREAT 1405,59581
get_cgroup_create_cgroup_cmd(1407,59672
#define MP_CLIENT_CGROUP_ADD_TASK 1413,59879
get_cgroup_add_task_cmd(1415,59983
#define MP_CLIENT_CGROUP_SET_CPU_SHARE 1421,60208
get_cgroup_set_cpu_share_cmd(1423,60322
#define MP_CLIENT_CGROUP_SET_CPU_SHARE_ONVM_MGR 1429,60569
get_cgroup_set_cpu_share_cmd_onvm_mgr(1431,60682
set_cgroup_nf_cpu_share(1439,60962
set_cgroup_nf_cpu_share_from_onvm_mgr(1454,61596
#define RTE_LOGTYPE_APP 1472,62256
typedef struct per_core_nf_pool 1475,62329
        uint16_t nf_count;1476,62363
        uint32_t nf_ids[nf_ids1477,62390
}per_core_nf_pool_t;per_core_nf_pool_t1478,62424
typedef struct sc_entries 1482,62479
        struct onvm_service_chain *sc;sc1483,62507
        uint16_t sc_count;1484,62546
        uint16_t bneck_flag;1485,62573
}sc_entries_list;sc_entries_list1486,62602
typedef struct bottleneck_nf_entries 1492,63007
        onvm_time_t s_time;1493,63046
        uint16_t enqueue_status;1494,63074
        uint16_t nf_id;1495,63213
        uint16_t enqueued_ctr;1496,63237
        uint16_t marked_ctr;1497,63268
}bottleneck_nf_entries_t;bottleneck_nf_entries_t1498,63297
typedef struct bottlenec_nf_info 1499,63323
        uint16_t entires;1500,63358
        bottleneck_nf_entries_t nf[nf1502,63527
}bottlenec_nf_info_t;bottlenec_nf_info_t1503,63572
bottlenec_nf_info_t bottleneck_nf_list;1504,63594
#define WAIT_TIME_BEFORE_MARKING_OVERFLOW_IN_US 1508,63702
typedef struct fipo_buf_node 1519,64476
        void *pkt;pkt1520,64507
        struct fipo_buf_node *next;next1521,64526
        struct fipo_buf_node *prev;prev1522,64562
}fipo_buf_node_t;fipo_buf_node_t1523,64598
typedef struct fipo_list 1525,64617
        uint32_t buf_count;1526,64644
        fipo_buf_node_t *head;head1527,64672
        fipo_buf_node_t *tail;tail1528,64703
}fipo_list_t;fipo_list_t1529,64734
typedef fipo_list_t fipo_per_flow_list;1530,64748
#define MAX_NUM_FIPO_FLOWS 1533,65020
#define MAX_BUF_PER_FLOW 1534,65053
typedef struct nf_flow_list 1535,65152
        uint32_t flow_count;1536,65182
        fipo_per_flow_list *head;head1537,65211
        fipo_per_flow_list *tail;tail1538,65245
}nf_flow_list_t;nf_flow_list_t1539,65279
#define TEST_INLINE_FUNCTION_CALL1542,65329
typedef int(*nf_pkt_handler)nf_pkt_handler1544,65396

onvm_nflib/onvm_sc_common.c,93
int onvm_sc_append_entry(45,2099
int onvm_sc_set_entry(66,2795
void onvm_sc_print(84,3394

onvm_nflib/onvm_ringbuf.c,144
int onvm_su_ring_init(7,106
int onvm_su_ring_enqueu(16,417
int onvm_su_ring_dequeue(29,870
int onvm_su_ring_dinit(42,1349
int main(49,1566

onvm_nflib/onvm_config_common.c,483
#define IS_NULL_OR_EMPTY_STRING(49,2141
onvm_config_parse_file(52,2232
onvm_config_extract_corelist(90,3121
onvm_config_extract_memory_channels(122,3920
onvm_config_extract_portmask(141,4375
onvm_config_extract_output_location(160,4792
onvm_config_extract_service_id(183,5533
onvm_config_extract_instance_id(198,5910
onvm_config_get_item_count(213,6293
onvm_config_create_nf_arg_list(234,6694
onvm_config_create_onvm_args(373,11645
onvm_config_create_dpdk_args(441,14117

onvm_nflib/onvm_msg_common.h,1043
#define _MSG_COMMON_H_44,2109
#define MSG_FROM_MGR 48,2154
#define MSG_NOOP 49,2181
#define MSG_STOP 50,2226
#define MSG_PAUSE 51,2271
#define MSG_RESUME 52,2316
#define MSG_RUN 53,2361
#define MAX_MSG_FROM_MGR 54,2402
#define MSG_GPU_MODEL_PRI 56,2438
#define MSG_GPU_MODEL_SEC 57,2544
#define MSG_RESTART 58,2627
#define MSG_GET_GPU_READY 59,2706
#define MSG_FROM_NF 61,2807
#define MSG_NF_STARTING 62,2834
#define MSG_NF_STOPPING 63,2878
#define MSG_NF_READY 64,2922
#define MSG_NF_UNBLOCK_SELF 65,2966
#define MSG_NF_REGISTER_ECB 66,3010
#define MSG_NF_TRIGGER_ECB 67,3054
#define MSG_NF_SYNC_RESP 68,3098
#define MSG_GIVE_GPU_MODEL 70,3143
#define MSG_NF_GPU_READY 71,3217
#define MSG_NF_RESTART_OK 72,3303
#define MSG_NF_VOLUNTARY_RE 73,3385
#define MSG_MODE_ASYNCHRONOUS 75,3490
#define MSG_MODE_SYNCHRONOUS 76,3526
struct onvm_nf_msg 78,3563
        uint8_t msg_type;79,3584
        uint8_t is_sync;81,3778
        void *msg_data;msg_data83,3906
#define ENABLE_MSG_CONSTRUCT_NF_INFO_NOTIFICATION87,4141

onvm_nflib/onvm_flow_table.c,294
uint8_t rss_symmetric_key[rss_symmetric_key49,2160
onvm_ft_create(63,2929
onvm_ft_add_pkt(109,4485
onvm_ft_lookup_pkt(132,5177
onvm_ft_remove_pkt(155,6004
onvm_ft_add_key(168,6330
onvm_ft_lookup_key(183,6732
onvm_ft_remove_key(198,7112
onvm_ft_iterate(214,7798
onvm_ft_free(221,8011

onvm_nflib/onvm_gpu_buffer_factory.h,74
#define _ONVM_GPU_BUFFER_FACTORY_2,34
#define SIZE_OF_A_MEM_BUFFER 4,69

onvm_nflib/onvm_sort.c,495
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
int onvm_cmp_int_a(11,244
int onvm_cmp_int_d(21,510
void onvm_sort_int(32,777
int onvm_cmp_uint32_a(40,1233
int onvm_cmp_uint32_d(50,1522
void onvm_sort_uint32(60,1811
int onvm_cmp_uint64_a(68,2286
int onvm_cmp_uint64_d(78,2575
void onvm_sort_uint64(88,2864
int onvm_cmp_uint32_r(97,3340
int onvm_cmp_func_r 119,4035
void onvm_sort_generic_r(131,4325
void onvm_sort_generic(159,5524
int main(185,6467

onvm_nflib/onvm_nflib.h,4396
#define _ONVM_NFLIB_H_54,2277
static struct rte_mempool *nf_batch_agg_pool;nf_batch_agg_pool295,9679
static struct rte_mempool *nf_batch_dev_buffer_pool;nf_batch_dev_buffer_pool296,9757
static char *ml_model_file;ml_model_file299,9947
static uint16_t ml_model_number;300,9995
typedef int (*load_ml_model)load_ml_model303,10070
typedef void (*evaluate_application_batch)evaluate_application_batch306,10245
typedef int (*get_model_gpu_ready)get_model_gpu_ready309,10537
typedef struct ml_related_functions{ml_related_functions313,10740
  load_ml_model load_model;314,10777
  get_model_gpu_ready get_gpu_ready;315,10862
  evaluate_application_batch evaluate_batch;316,10980
  void *transfer_data;transfer_data317,11103
}ml_related_functions;ml_related_functions318,11223
ml_related_function ml_functions;321,11344
typedef int (*gpu_message_processing_func)gpu_message_processing_func336,11962
float throughputs[throughputs347,12617
struct timespec batch_fed[batch_fed348,12642
struct timespec batch_fed[1000], batch_processed[batch_processed348,12642
int num_throughput_stored;349,12698
struct rte_timer image_stats_timer;355,12910
struct rte_timer image_inference_timer;358,12988
int  gpu_queue_image_id[gpu_queue_image_id369,13545
struct gpu_callback gpu_callbacks[gpu_callbacks372,13700
int num_elements_in_gpu_queue;373,13746
int gpu_queue_current_index;374,13777
typedef int (*nf_explicit_callback_function)nf_explicit_callback_function386,14037
#define MAX_FILE_PATH_SIZE 393,14290
#define AIO_OPTION_SYNC_MODE_RW 394,14335
#define AIO_OPTION_BATCH_PROCESS 395,14413
#define AIO_OPTION_PER_FLOW_QUEUE 396,14483
typedef struct nflib_aio_info 397,14559
        uint8_t file_path[file_path398,14591
        int mode;399,14638
        uint32_t num_of_buffers;400,14698
        uint32_t max_buffer_size;401,14785
        uint32_t aio_options;402,14863
        uint32_t wait_pkt_queue_len;403,14935
}nflib_aio_info_t;nflib_aio_info_t404,15037
typedef struct onvm_nflib_aio_init_info 405,15056
        nflib_aio_info_t aio_read;406,15098
        nflib_aio_info_t aio_write;407,15157
        uint32_t max_worker_threads;408,15217
        uint8_t aio_service_type;409,15292
}onvm_nflib_aio_init_info_t;onvm_nflib_aio_init_info_t410,15383
typedef struct nflib_aio_status 411,15412
        int32_t rw_status;412,15446
        void *rw_buffer;rw_buffer413,15531
        uint8_t rw_buf_len;414,15634
        off_t rw_offset;415,15682
}nflib_aio_status_t;nflib_aio_status_t416,15753
typedef int (*aio_notify_handler_cb)aio_notify_handler_cb421,15921
typedef struct dirty_mon_state_map_tbl 438,16850
        uint64_t dirty_index;439,16891
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t441,16975
#define DIRTY_MAP_PER_CHUNK_SIZE 445,17034
typedef struct nflib_ml_fw_load_params_t 455,17250
	const char* file_path;456,17293
	uint32_t file_len;457,17317
	uint32_t load_options;458,17337
	void* model_handle;459,17361
}nflib_ml_fw_load_params_t;nflib_ml_fw_load_params_t460,17382
typedef struct nflib_ml_fw_link_params_t 462,17411
	void* model_handle;463,17454
	int number_of_parameters;464,17475
	void* cuda_handles_for_gpu_data;465,17502
}nflib_ml_fw_link_params_t;nflib_ml_fw_link_params_t466,17536
typedef struct nflib_ml_fw_infer_params_t 468,17565
	void* model_handle;469,17609
	void* input_data;470,17630
	size_t input_size;471,17649
	float* output;472,17669
	void* evaluation_time;473,17685
	int cuda_event_flag;474,17709
	int batch_size;475,17731
	cudaHostFn_t callback_function;476,17748
	void *callback_data;callback_data477,17781
	uint32_t file_len;478,17803
	uint32_t load_options;479,17823
}nflib_ml_fw_infer_params_t;nflib_ml_fw_infer_params_t480,17847
typedef int (*ml_fw_load_model)ml_fw_load_model483,17950
typedef int (*ml_fw_link_model)ml_fw_link_model484,18052
typedef int (*ml_fw_infer_batch)ml_fw_infer_batch485,18154
typedef int (*ml_fw_get_inf_res)ml_fw_get_inf_res486,18259
typedef int (*ml_fw_deinit)ml_fw_deinit487,18364
typedef struct ml_framework_operations_t 490,18507
	ml_fw_load_model 	load_model_fptr;491,18550
	ml_fw_link_model 	link_model_fptr;492,18586
	ml_fw_infer_batch	infer_batch_fptr;493,18622
	ml_fw_get_inf_res	get_inf_res_fptr;494,18659
	ml_fw_deinit		deinit_fptr;495,18696
}ml_framework_operations_t;ml_framework_operations_t496,18724

onvm_nflib/histogram.c,623
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
#define EWMA_ALPHA 10,243
#define EWMA_AVG(11,270
void hist_init(13,351
void hist_clear(38,994
void hist_store(42,1071
void hist_print(64,1788
uint32_t hist_mean(82,2549
uint32_t hist_median(99,2991
uint32_t hist_mode(145,4262
uint32_t hist_percentile(162,4790
uint32_t get_histogram(203,6179
uint32_t get_modes(227,6953
void hist_init_v2(265,8228
void hist_store_v2(283,8617
void hist_compute_v2(307,9526
void hist_extract_all_v2(329,10571
uint32_t hist_extract_v2(338,10857
void hist_print_v2(385,12409
int main(393,12717

onvm_nflib/onvm_ringbuf.h,316
#define _ONVM_SURING_H_3,25
#define MAX_RINGBUF_SIZE 6,130
typedef struct onvm_single_user_ring 7,164
        uint16_t r_count;8,203
        uint16_t r_h;9,271
        uint16_t w_h;10,334
        uint16_t max_len;11,398
        void* ring[ring12,462
}onvm_single_user_ring_t;onvm_single_user_ring_t13,500

onvm_nflib/onvm_stream.h,292
#define _ONVM_STREAM_H2,23
#define MAX_STREAMS 4,47
#define PARALLEL_EXECUTION 5,69
#define STREAMS_ENABLED 6,98
#define DEFAULT_STREAM 7,124
typedef struct stream_tracker{stream_tracker8,149
  cudaStream_t stream;9,180
  uint8_t status;10,203
}stream_tracker;stream_tracker11,316

onvm_nflib/onvm_stream.c,216
stream_tracker streams_track[streams_track7,77
int init_streams(10,165
long rr_counter;29,610
int status_tracker[status_tracker30,627
stream_tracker *give_stream(give_stream33,800
void return_stream(72,1454

onvm_nflib/onvm_netml.c,28
void data_aggregation(6,67

onvm_nflib/onvm_sc_mgr.h,375
#define _SC_MGR_H_42,2043
typedef struct active_sc_entries 48,2112
        uint32_t sc_count;49,2147
        struct onvm_service_chain *sc[sc50,2174
} __rte_cache_aligned active_sc_entries_t;51,2229
onvm_next_action(55,2338
onvm_sc_next_action(63,2550
onvm_next_destination(68,2718
onvm_sc_next_destination(76,2923
onvm_sc_get_next_action_and_destionation(81,3096

onvm_mgr/onvm_mgr.h,81
#define _ONVM_MGR_H_54,2290
#define TO_PORT 90,3076
#define TO_CLIENT 91,3094

onvm_mgr/onvm_nf.c,2185
uint16_t next_instance_id 60,2455
uint8_t  global_bkpr_mode=64,2665
uint16_t downstream_nf_overflow 65,2694
uint16_t highest_downstream_nf_service_id=66,2731
uint16_t lowest_upstream_to_throttle 67,2776
uint64_t throttle_count 68,2818
#define EWMA_LOAD_ADECAY 71,2891
nf_schedule_info_t nf_sched_param;75,3069
#define DEFAULT_NF_CPU_SHARE 86,3686
typedef struct nf_core_and_cc_info 89,3806
        uint32_t total_comp_cost;90,3843
        uint32_t total_nf_count;91,3954
        uint32_t total_pkts_served;92,4048
        uint32_t total_load;93,4158
        uint64_t total_load_cost_fct;94,4259
}nf_core_and_cc_info_t;nf_core_and_cc_info_t95,4395
static inline void assign_nf_cgroup_weight(102,4754
static inline void assign_all_nf_cgroup_weight(113,5252
void compute_nf_exec_period_and_cgroup_weight(119,5445
void compute_and_assign_nf_cgroup_weight(199,11771
void extract_nf_load_and_svc_rate_info(289,18673
void compute_and_order_nf_wake_priority(331,21103
int nf_sort_func(343,21699
void setup_nfs_priority_per_core_list(361,22204
inline void monitor_nf_node_liveliness_via_pid_monitoring(395,23945
onvm_nf_is_valid(412,25028
onvm_nf_is_paused(417,25231
onvm_nf_is_processing(421,25330
onvm_nf_is_waiting_on_NDSYNC(425,25520
onvm_nf_is_NDSYNC_set(434,25896
onvm_nf_is_instance_id_free(444,26178
onvm_nf_next_instance_id(449,26281
int onvm_nf_recv_resp_msg(468,26865
void onvm_nf_recv_and_process_msgs(502,27979
onvm_nf_check_status(595,31477
onvm_nf_stats_update(611,32044
onvm_nf_service_to_nf_map_V2(631,32778
onvm_nf_service_to_nf_map(659,33691
onvm_nf_send_msg(693,35386
#define MAX_SYNC_RETRY_COUNT 714,36074
onvm_nf_send_msg_sync(717,36121
int onvm_nf_register_run(743,37469
onvm_nf_start(848,43635
onvm_nf_stop(909,45789
static sc_entries_list sc_list[sc_list993,49164
onvm_mark_all_entries_for_bottleneck(997,49224
onvm_clear_all_entries_for_bottleneck(1066,52956
int enqueu_nf_to_bottleneck_watch_list(1135,57319
int dequeue_nf_from_bottleneck_watch_list(1162,58685
static inline void mark_nf_backpressure_from_bottleneck_watch_list(1189,60039
int check_and_enqueue_or_dequeue_nfs_from_bottleneck_watch_list(1202,60551

onvm_mgr/zoo_queue.h,371
#define ZOOKEEPER_QUEUE_H_20,835
struct zkr_queue 36,1030
    zhandle_t *zh;zh37,1049
    char *path;path38,1068
    struct ACL_vector *acl;acl39,1084
    pthread_mutex_t pmutex;40,1112
    char *node_name;node_name41,1140
    int node_name_length;42,1161
    char *cached_create_path;cached_create_path43,1187
typedef struct zkr_queue zkr_queue_t;46,1221

onvm_mgr/onvm_pkt.h,29
#define _ONVM_PKT_H_54,2296

onvm_mgr/onvm_zookeeper.c,914
#define EXPIRATION_CACHE_LEN 66,2624
#define MAC_STR_LEN 67,2657
static zhandle_t *zh zh70,2719
static const clientid_t *myid myid71,2748
static char *nf_stat_paths[nf_stat_paths72,2786
struct remote_service_result 75,2857
        char mac_address[mac_address76,2888
        struct ether_addr mac_address_struct;77,2927
        time_t expiration;78,2973
static struct remote_service_result service_lookup_cache[service_lookup_cache80,3003
onvm_zk_connect(92,3558
onvm_zk_client_id(112,4014
onvm_zk_init(118,4115
onvm_zk_nf_start(159,5460
onvm_zk_nf_stop(214,7574
onvm_zk_disconnect(246,8576
onvm_zk_lookup_service(253,8689
onvm_zk_update_nf_stats(308,10830
update_service_last_modified(372,13274
get_service_last_modified(390,13862
can_scale_locally(415,14684
enqueue_remote_scale_msg(433,15261
can_scale_remotely(448,15701
mac_string_to_struct(494,17267
free_String_vector(517,17872

onvm_mgr/onvm_init.c,3364
struct onvm_nf *nfs nfs58,2377
struct port_info *ports ports59,2405
struct rte_mempool *pktmbuf_pool;pktmbuf_pool61,2438
struct rte_mempool *nf_info_pool;nf_info_pool62,2472
struct rte_mempool *nf_msg_pool;nf_msg_pool63,2506
struct rte_ring *mgr_msg_queue;mgr_msg_queue64,2539
struct rte_mempool *image_batch_aggegation_info;image_batch_aggegation_info67,2588
struct rte_mempool *image_batch_devbuffer;image_batch_devbuffer68,2637
struct rte_ring *mgr_rsp_queue;mgr_rsp_queue72,2721
struct rte_mempool *nf_state_pool;nf_state_pool76,2784
struct rte_mempool *service_state_pool;service_state_pool80,2886
void **services_state_pool;services_state_pool81,2926
struct rte_mempool *per_flow_ts_pool;per_flow_ts_pool86,3069
void *onvm_mgr_tx_per_flow_ts_info;onvm_mgr_tx_per_flow_ts_info88,3176
void *onvm_mgr_tx_per_flow_ts_info_db[onvm_mgr_tx_per_flow_ts_info_db91,3295
void *onvm_mgr_tx_per_flow_ts_info_db;onvm_mgr_tx_per_flow_ts_info_db93,3370
struct rte_ring *tx_port_ring[tx_port_ring99,3471
struct rte_ring *tx_tx_state_latch_ring[tx_tx_state_latch_ring100,3599
struct rte_ring *tx_nf_state_latch_ring[tx_nf_state_latch_ring101,3737
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring104,3990
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring105,4186
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring107,4420
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring108,4561
uint16_t **services;services113,4756
uint16_t *nf_per_service_count;nf_per_service_count114,4777
struct onvm_service_chain *default_chain;default_chain116,4810
struct onvm_service_chain **default_sc_p;default_sc_p117,4852
int onvm_socket_id;120,4947
void *zmq_ctx;zmq_ctx124,5024
void *onvm_socket_id;onvm_socket_id125,5039
void *onvm_socket_ctx;onvm_socket_ctx126,5061
uint8_t remote_eth_addr[remote_eth_addr130,5112
struct ether_addr remote_eth_addr_struct;131,5174
uint32_t nf_mgr_id;156,5895
#define RX_PTHRESH 179,6589
#define RX_HTHRESH 180,6661
#define RX_WTHRESH 181,6729
#define TX_PTHRESH 188,7011
#define TX_HTHRESH 189,7084
#define TX_WTHRESH 190,7153
static const struct rte_eth_conf port_conf 192,7229
static const struct rte_eth_rxconf rx_conf 213,7984
static const struct rte_eth_txconf tx_conf 222,8216
init(238,8594
init_mbuf_pools(371,13612
static int init_nf_state_pool(388,14387
static int init_service_state_pool(408,15539
static int init_per_flow_ts_pool(426,16480
                        #define PER_FLOW_TS_POOL_COUNT 430,16666
                        #define PER_FLOW_TS_POOL_COUNT 432,16787
                        #define PER_FLOW_TS_POOL_COUNT 436,17057
                        #define PER_FLOW_TS_POOL_COUNT 438,17148
                #define PER_FLOW_TS_POOL_COUNT 443,17313
                #define PER_FLOW_TS_POOL_COUNT 445,17388
static int init_rsync_tx_rings(466,18445
init_nf_msg_pool(535,23633
init_nf_batch_agg_info(551,24192
static int init_image_batch_dev_buffer(568,24810
static int init_models_attributes(587,25437
init_client_info_pool(649,27537
init_port(693,29383
init_shm_rings(787,33442
init_mgr_queues(1014,44440
check_all_ports_link_status(1044,45366
#define CHECK_INTERVAL 1045,45434
#define MAX_CHECK_TIME 1046,45473
static uint32_t read_onvm_mgr_id_from_system(1107,48112

onvm_mgr/onvm_wakemgr.c,1309
unsigned nfs_wakethr[nfs_wakethr61,2542
struct wakeup_info *wakeup_infos;wakeup_infos64,2607
#define WAKE_INTERVAL_IN_US 76,3093
#define USLEEP_INTERVAL 77,3173
struct rte_timer wake_timer[wake_timer82,3473
typedef struct core_nf_timers 88,3685
        struct rte_timer    timer;89,3717
        uint16_t            timer_status;90,3752
        uint16_t            index;91,3815
        uint16_t            nf_id;92,3887
        uint16_t            core_id;93,3922
        uint16_t            next_nf_id;94,3959
        uint64_t            exec_period;95,3999
}core_nf_timers_t;core_nf_timers_t96,4040
core_nf_timers_t    core_timers[core_timers97,4059
static void wake_timer_cb(107,4544
initialize_wake_timers(119,5189
initialize_per_core_timers 140,5728
static void per_core_timer_cb(153,6222
int launch_core_nf_timer(168,6937
static void  arbiter_wakeup_client(194,8090
whether_wakeup_client(224,9395
notify_client(293,11976
wakeup_client_internal(301,12124
wakeup_client(315,12526
static inline void handle_wakeup_old(325,12764
static inline void handle_wakeup_ordered(332,12999
inline void handle_wakeup(362,14463
#define WAKE_THREAD_SLEEP_INTERVAL_NS 366,14609
wakemgr_main(368,14659
inline void check_and_wakeup_nf(389,15328
inline void check_and_block_nf(399,15679

onvm_mgr/onvm_gpu.h,855
#define ONVM_GPU_H2,19
struct gpu_file_listing * ml_files[ml_files18,469
#define NUM_OF_RUNTIME_DATAPOINTS 20,524
typedef enum nf_state{nf_state111,3626
typedef enum nf_state{zstart,zstart111,3626
typedef enum nf_state{zstart, zrestart,111,3626
typedef enum nf_state{zstart, zrestart, zstop}zstop111,3626
typedef enum nf_state{zstart, zrestart, zstop} nf_state;111,3626
typedef struct zinformation_format{zinformation_format113,3684
  int num_of_elements;114,3720
  int pid_array[pid_array115,3743
}zinfo_format;zinfo_format116,3763
typedef struct zmgr_msg_struct{zmgr_msg_struct119,3846
  nf_state state;120,3878
  size_t msg_size;121,3896
  struct timespec timestamp;122,3915
  zinfo_format information;123,3944
} zmgr_msg;124,4081
void * zmqContext;129,4149
void * zmqRequester;130,4168
const char * ipc_file_path;131,4189

onvm_mgr/onvm_pkt.c,787
static inline int get_flow_entry(62,2775
onvm_pkt_process_rx_batch(78,3293
onvm_pkt_process_tx_batch(137,5743
onvm_pkt_flush_all_ports(227,9586
onvm_pkt_flush_all_nfs(241,9838
onvm_pkt_drop_batch(254,10076
onvm_pkt_flush_port_queue(269,10378
onvm_pkt_flush_nf_queue(359,14075
onvm_pkt_enqueue_port(423,16400
onvm_pkt_enqueue_port_v2(439,16940
onvm_pkt_enqueue_nf(467,18006
onvm_pkt_process_next_action(609,25943
onvm_pkt_drop(664,28128
onvm_detect_and_set_ecn_ce(674,28287
#define CE_BITS 676,28421
static inline void write_ft_to_cl_bft(692,29174
static inline void read_all_ft_frm_cl_bft(729,31519
void onvm_set_back_pressure_v2(771,34011
onvm_set_back_pressure(790,34523
onvm_check_and_reset_back_pressure_v2(873,38901
onvm_check_and_reset_back_pressure(903,40146

onvm_mgr/main.c,1977
onvm_bfd_init_config_t bfd_config;68,2625
int node_role 73,2770
#define MAX_SHUTDOWN_ITERS 79,2999
static uint8_t main_keep_running 82,3090
static uint8_t worker_keep_running 86,3275
int process_nf_function_inline(91,3511
nf_pkt_handler nf_process_packet 94,3662
uint8_t remote_eth_addr[remote_eth_addr101,3819
struct ether_addr remote_eth_addr_struct;102,3847
typedef struct thread_core_map_t 105,3897
        unsigned rx_th_core[rx_th_core106,3932
        unsigned tx_t_core[tx_t_core107,3982
        unsigned wk_th_core[wk_th_core109,4034
        unsigned mn_th_core;111,4095
}thread_core_map_t;thread_core_map_t112,4124
static thread_core_map_t thread_core_map;113,4144
#define NF_STATUS_CHECK_PERIOD_IN_MS 117,4237
#define NF_STATUS_CHECK_PERIOD_IN_US 118,4318
#define DISPLAY_STATS_PERIOD_IN_MS 119,4448
#define NF_LOAD_EVAL_PERIOD_IN_MS 120,4526
#define USLEEP_INTERVAL_IN_US 121,4585
struct rte_timer display_stats_timer;128,5211
struct rte_timer nf_status_check_timer;129,5310
struct rte_timer nf_load_eval_timer;130,5438
struct rte_timer main_arbiter_timer;131,5548
display_stats_timer_cb(147,6360
nf_status_check_timer_cb(156,6681
nf_load_stats_timer_cb(164,6873
arbiter_timer_cb(185,7671
initialize_master_timers(198,8154
#define MAIN_THREAD_POLL249,10124
#define MAIN_THREAD_SLEEP_INTERVAL_NS 251,10174
master_thread_main(257,10309
rx_thread_main(344,13437
#define PACKET_READ_SIZE_TX 396,15804
tx_thread_main(398,15876
static inline int create_rx_threads(468,19113
static inline int create_tx_threads(487,20093
static inline int create_wakeup_threads(517,21791
static inline int create_rsync_threads(544,23399
main(558,23979
#define ENABLE_REPLAY_LATENCY_PROFILER693,28982
static onvm_interval_timer_t ts;695,29059
void replay_and_terminate_failover(697,29099
void initiate_node_failover(709,29503
static int bfd_handle_callback(727,30175
static void signal_handler(747,30988
register_signal_handler(764,31607

onvm_mgr/onvm_zk_watch.h,33
#define ONVM_ZK_WATCH_H_52,2338

onvm_mgr/onvm_bfd.h,2650
#define _ONVM_BFD_H_52,2352
#define BasePacketSize 94,4313
#define MaxAuthDataSize 97,4423
#define AuthHeaderSize 100,4516
#define MaxPacketSize 103,4635
#define ListenPort 106,4746
#define TTLValue 109,4805
#define MinSourcePort 112,4910
#define MaxSourcePort 115,5023
#define Version 118,5134
#define BaseMinTxInterval 121,5235
#define BFD_CHECKPOINT_PERIOD_IN_US 123,5273
#define BFDEchoInterval_us 126,5555
#define BFDMinRxInterval_us 127,5617
#define BFDMinTxInterval_us 128,5655
#define BFDEchoMissMultiplier 129,5693
#define BFDTimeoutValue_us 130,5778
#define BFDTimeoutErr_oft_us 131,5853
#define BFD_TIMEOUT_INTERVAL 132,5906
#define BFD_SLOW_SEND_RATE_RATIO_COUNTER 133,5982
#define BFD_MAX_PER_INTV_PER_PORT 134,6128
typedef enum BFD_StateValue136,6242
  AdminDown 138,6272
  Down 139,6289
  Init 140,6306
  Up 141,6323
}BFD_StateValue;BFD_StateValue142,6340
typedef enum BFD_DiagStateValue148,6410
  None 150,6444
  ControlDetectExpired 151,6456
  EchoFailed 152,6484
  NeighborSessionDown 153,6502
  ForwardingReset 154,6529
  PathDown 155,6552
  ConcatPathDown 156,6568
  AdmDown 157,6590
  ReverseConcatPathDown 158,6605
  MaxDiagnostic 159,6634
}BFD_DiagStateValue;BFD_DiagStateValue160,6655
typedef enum BFD_AuthTypeValue168,6811
  none 170,6844
  Password 171,6856
  MD5 172,6872
  MeticulousMD5 173,6883
  SHA1 174,6904
  MeticulousSHA1 175,6916
}BFD_AuthTypeValue;BFD_AuthTypeValue176,6938
typedef struct BfdPacketHeader183,7026
  uint8_t versAndDiag;185,7059
  uint8_t flags;186,7132
  uint8_t detectMult;187,7149
  uint8_t length;188,7171
  uint32_t myDisc;189,7222
  uint32_t yourDisc;190,7270
  uint32_t txDesiredMinInt;191,7320
  uint32_t rxRequiredMinInt;192,7348
  uint32_t rxRequiredMinEchoInt;193,7377
} __attribute__((__packed__)) BfdPacketHeader;216,8889
typedef struct BFDAuthData223,9020
  uint8_t type;225,9049
  uint8_t len;226,9065
  uint8_t data[data227,9080
}BFDAuthData;BFDAuthData233,9295
typedef struct BfdPacket238,9351
  BfdPacketHeader header;240,9378
}BfdPacket;BfdPacket242,9426
#define BFD_STATUS_REMOTE_DOWN 252,9543
#define BFD_STATUS_LOCAL_DOWN 253,9579
typedef int(*bfd_status_notifier_cb)bfd_status_notifier_cb254,9615
#define MAX_BFD_SESSIONS 255,9690
typedef struct onvm_bfd_init_config 256,9720
        uint32_t bfd_identifier;257,9758
        uint8_t num_ports;258,9791
        uint8_t session_mode[session_mode259,9818
        bfd_status_notifier_cb cb_func;260,9866
}onvm_bfd_init_config_t;onvm_bfd_init_config_t261,9906
#define BFD_SESSION_MODE_PASSIVE 263,9932
#define BFD_SESSION_MODE_ACTIVE 264,9972

onvm_mgr/onvm_args.h,66
#define _ONVM_ARGS_H_53,2302
#define DEFAULT_SERVICE_ID 60,2406

onvm_mgr/onvm_stats.c,935
#define onvm_stats_display_nfs(68,2676
static FILE *stats_out;stats_out93,3215
static FILE *json_stats_out;json_stats_out94,3239
char buffer[buffer100,3423
onvm_stats_init(105,3527
onvm_stats_set_output(113,3932
onvm_stats_cleanup(142,5190
void onvm_stats_display_rsync_tx_thread_stats(151,5449
onvm_stats_display_all(170,6503
onvm_stats_clear_all_clients(200,7501
onvm_stats_clear_client(213,7847
#define USE_EXTENDED_PORT_STATS223,8182
get_port_stats_rate(226,8257
void onvm_stats_display_mode(268,10788
onvm_stats_display_ports(316,12045
onvm_stats_display_clients(396,15803
void onvm_stats_display_chains(604,27034
onvm_stats_clear_terminal(614,27324
onvm_stats_print_MAC(623,27552
onvm_print_ethaddr(644,28344
onvm_stats_flush(652,28579
onvm_stats_truncate(663,28772
onvm_json_reset_objects(679,29227
static onvm_stats_snapshot_t sn_local[sn_local699,29923
int get_onvm_nf_stats_snapshot_v2(700,29981

onvm_mgr/onvm_bfd.c,1936
#define BFD_TX_PORT_QUEUE_ID 54,2401
#define BFD_PKT_OFFSET 59,2547
typedef struct bfd_session_status 61,2649
        uint8_t mode;63,2740
        BFD_StateValue local_state;66,2837
        BFD_StateValue remote_state;67,2873
        BFD_DiagStateValue local_diags;68,2910
        BFD_DiagStateValue remote_diags;69,2950
        uint64_t local_descr;72,3053
        uint64_t remote_descr;73,3083
        uint64_t tx_rx_interval;76,3211
        uint64_t last_sent_pkt_ts;78,3293
        uint64_t last_rcvd_pkt_ts;80,3382
        uint64_t pkt_missed_counter;82,3531
        uint64_t bfd_status_change_counter;84,3606
        uint64_t last_rx_pkts;88,3754
        uint8_t last_rx_set;89,3785
        uint8_t  skip_bfd_query;90,3814
}bfd_session_status_t;bfd_session_status_t93,3855
typedef struct bfd_pkt_stat_t 95,3879
        uint64_t rx_count;96,3911
        uint64_t tx_count;97,3938
}bfd_pkt_stat_t;bfd_pkt_stat_t98,3965
bfd_pkt_stat_t bfd_stat;100,3983
struct rte_timer bfd_status_checkpoint_timer;103,4050
bfd_session_status_t bfd_sess_info[bfd_sess_info104,4096
bfd_status_notifier_cb notifier_cb;105,4150
BfdPacket bfd_template;106,4186
static void init_bfd_session_status(120,4816
onvm_bfd_start(146,5859
onvm_bfd_stop(151,5907
bfd_status_checkpoint_timer_cb(155,5961
static inline int initialize_bfd_timers(169,6700
static inline int bfd_send_packet_out(176,7101
static void set_bfd_packet_template(184,7469
int print_bfd_packet(194,8026
static void parse_and_set_bfd_session_info(205,8802
struct rte_mbuf* create_bfd_packet(238,10917
int parse_bfd_packet(292,13017
static void send_bfd_echo_packets(310,13796
static void check_bdf_remote_status(340,15377
onvm_bfd_process_incoming_packets(395,18500
onvm_bfd_init(405,18867
onvm_bfd_deinit(427,19631
int onvm_print_bfd_status(432,19677
struct rte_mbuf* create_bfd_packet_spcl(458,21563
void send_bfd_echo_packets_spcl(503,23351

onvm_mgr/onvm_ft_install.c,1068
typedef struct onvm_ft_args 71,2775
        const char* servicechain_file;72,2805
        const char* ipv4rules_file;73,2883
        const char* base_ip_addr;74,2968
        uint32_t max_ip_addrs;75,3050
        uint32_t max_ft_rules;76,3136
        uint32_t rev_order;77,3220
}onvm_ft_args_t;onvm_ft_args_t78,3310
#define MAX_FLOW_TABLE_ENTRIES 81,3375
static onvm_ft_args_t globals 82,3421
#define MAX_SERVICE_CHAINS 92,3799
int schains[schains93,3829
int alt_port[alt_port94,3885
int max_service_chains=95,4025
struct onvm_ft_ipv4_5tuple ipv4_5tRules[ipv4_5tRules96,4051
uint32_t max_ft_entries=97,4116
static uint32_t get_ipv4_value(101,4243
parse_service_chains(133,5432
parse_ipv4_5t_rules(212,8124
setup_service_chain_for_flow_entry(277,10964
setup_schain_and_flow_entry_for_flip_key(343,13626
add_flow_key_to_sc_flow_table(429,16509
populate_random_flow_rules(517,19459
setup_flow_rule_and_sc_entries(582,22827
static int setup_flowrule_for_packet(599,23426
int init_onvm_ft_install(678,26853
int onvm_ft_handle_packet(694,27321

onvm_mgr/onvm_nf.h,477
#define _ONVM_NF_H_53,2354
#define MAX_CORES_ON_NODE 57,2410
typedef struct nfs_per_core 59,2498
        uint16_t sorted;60,2528
        uint16_t count;61,2622
        uint32_t nf_ids[nf_ids62,2703
        uint64_t run_time[run_time63,2817
}nfs_per_core_t;nfs_per_core_t64,2924
typedef struct nf_schedule_info 66,2942
        uint16_t sorted;67,2976
        nfs_per_core_t nf_list_per_core[nf_list_per_core68,3001
}nf_schedule_info_t;nf_schedule_info_t69,3061

onvm_mgr/onvm_vxlan.c,115
onvm_encapsulate_pkt(71,2893
onvm_decapsulate_pkt(158,6319
process_inner_cksums(201,7780
get_psd_sum(260,10054

onvm_mgr/onvm_special_nf0.h,37
#define _ONVM_SPECIAL_NF0_H_53,2420

onvm_mgr/onvm_vxlan.h,852
#define ONVM_VXLAN_H_51,2343
#define RTE_LOGTYPE_VXLAN 57,2432
#define IPV4_HEADER_LEN 59,2477
#define UDP_HEADER_LEN 60,2504
#define VXLAN_HEADER_LEN 61,2530
#define IP_VERSION 63,2558
#define IP_HDRLEN 64,2582
#define IP_DEFTTL 65,2660
#define IP_VHL_DEF 66,2705
#define IP_DN_FRAGMENT_FLAG 67,2749
#define VXLAN_HF_VNI 68,2784
#define DEFAULT_VXLAN_PORT 69,2816
#define VXLAN_SRC_IP 73,2961
#define VXLAN_DST_IP 74,2996
union tunnel_offload_info 77,3096
        uint64_t data;78,3124
                uint64_t l2_len:l2_len80,3164
                uint64_t l3_len:l3_len81,3231
                uint64_t l4_len:l4_len82,3297
                uint64_t tso_segsz:tso_segsz83,3358
                uint64_t outer_l2_len:outer_l2_len84,3426
                uint64_t outer_l3_len:outer_l3_len85,3498
} __rte_cache_aligned;87,3582

onvm_mgr/onvm_init.h,997
#define _ONVM_INIT_H_54,2317
#define MBUFS_PER_NF 97,3416
#define MBUFS_PER_PORT 98,3514
#define MBUF_CACHE_SIZE 99,3617
#define MBUF_OVERHEAD 100,3645
#define RX_MBUF_DATA_SIZE 101,3716
#define MBUF_SIZE 102,3747
#define NF_INFO_SIZE 104,3802
#define NF_INFO_CACHE 105,3851
#define NF_MSG_SIZE 107,3971
#define NF_MSG_CACHE_SIZE 108,4018
#define IMAGE_CACHE_SIZE 112,4115
#define IMAGE_STATE_CACHE_SIZE 113,4142
#define GPU_MODEL_INFO_CACHE_SIZE 114,4175
#define CLIENT_QUEUE_RING_THRESHOLD 121,4517
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 122,4558
#define CLIENT_QUEUE_RING_THRESHOLD 124,4664
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 125,4705
#define CLIENT_QUEUE_RING_WATER_MARK_SIZE 128,4787
#define CLIENT_QUEUE_RING_LOW_THRESHOLD 129,4895
#define CLIENT_QUEUE_RING_LOW_WATER_MARK_SIZE 130,5095
#define ECN_EWMA_ALPHA 131,5211
#define CLIENT_QUEUE_RING_ECN_MARK_SIZE 132,5242
#define NO_FLAGS 133,5415
#define DYNAMIC_CLIENTS 135,5435
#define STATIC_CLIENTS 136,5461

onvm_mgr/onvm_special_nf0.c,4237
#define ONVM_MGR_ACT_AS_2PORT_FWD_BRIDGE 74,2939
static uint8_t keep_running 80,3157
static struct onvm_nf *nf0_cl nf0_cl81,3190
inline int set_packet_forwarind_actions(86,3484
int send_direct_on_assigned_port(104,4276
int send_direct_on_alt_port(155,6822
static int onv_pkt_send_on_alt_port(208,8838
struct state_info 313,13182
        struct rte_mempool *pktmbuf_pool;pktmbuf_pool314,13202
        uint16_t nf_destination;315,13244
        uint32_t *source_ips;source_ips316,13277
        int print_flag;317,13307
struct state_info *state_info;state_info321,13394
typedef struct onvm_arp_resp_args 323,13426
        const char* ipmap_file;324,13462
        const char* ipmap_csv;325,13533
        uint32_t max_ports;326,13608
}onvm_arp_resp_args_t;onvm_arp_resp_args_t327,13687
static onvm_arp_resp_args_t arp_resp_info 328,13710
parse_port_ip_map(334,13874
send_arp_reply_v2(358,15042
int send_arp_reply(418,17308
static int try_check_and_send_arp_response(475,19512
static int onvm_special_nf_arp_responder_init(501,21278
const uint16_t MAX_SNAPLEN 526,22424
#define USE_PCAP_ROTATION_BUFFERS528,22469
#define PCAP_FILE_NAME 530,22537
#define PACP_PER_PORT_FILE_NAME 531,22581
get_pcap_file_name(533,22663
typedef struct pcap_session_meta 538,22872
        uint64_t max_capture_size;539,22907
        uint64_t max_packet_count;540,22942
        uint32_t reset_log_period_in_ms;541,22977
        const char* capture_file;544,23052
        uint8_t capture_port;545,23086
        pcap_t *pd;pd546,23116
        pcap_dumper_t *pcap_dumper;pcap_dumper547,23136
        uint8_t is_active;548,23172
        uint64_t captured_size;549,23199
        uint32_t captured_packet_count;550,23231
        onvm_time_t capture_start_time;551,23271
        onvm_time_t capture_end_time;552,23311
}pcap_session_meta_t;pcap_session_meta_t554,23350
#define MAX_PCAP_ROT_FILES 557,23379
#define PCAP_FILE_NAME 558,23411
#define PACP_PER_PORT_FILE_NAME 559,23455
get_pcap_file_name(561,23540
typedef struct pcap_log_meta{pcap_log_meta566,23771
        const char* capture_file;568,23834
        pcap_t *pd;pd569,23868
        pcap_dumper_t *pcap_dumper;pcap_dumper570,23888
        uint8_t is_active;571,23924
        uint64_t captured_size;572,23951
        uint32_t captured_packet_count;573,23983
        onvm_time_t capture_start_time;574,24023
        onvm_time_t capture_end_time;575,24063
}pcap_log_meta_t;pcap_log_meta_t577,24102
typedef struct pcap_session_meta 578,24120
        uint64_t max_capture_size;579,24155
        uint64_t max_packet_count;580,24190
        uint32_t reset_log_period_in_ms;581,24225
        uint8_t capture_port;582,24266
        uint8_t log_active_status;583,24296
        uint8_t ring_index;584,24331
        pcap_log_meta_t log[log585,24359
}pcap_session_meta_t;pcap_session_meta_t587,24409
#define PCAP_MAX_PACKET_COUNT 592,24604
#define PCAP_MAX_CAPTURE_SIZE 593,24698
#define USE_PCAP_PER_OUT_PORT594,24818
pcap_session_meta_t pcap_info 596,24878
pcap_session_meta_t pcap_infos[pcap_infos608,25388
typedef enum pcap_log_status_type 610,25445
        pcap_log_status_unused=611,25481
        pcap_log_status_active_logging=612,25515
        pcap_log_status_active_logging_stopped=613,25557
        pcap_log_status_replay_on=614,25607
        pcap_log_status_replay_finished=615,25644
}pcap_log_status_type_e;pcap_log_status_type_e616,25687
inline int onvm_util_init_pacp_logger(619,25747
inline int onvm_util_clear_pcap_log(654,27488
inline int onvm_util_log_packets(678,28433
inline const char* onvm_util_close_and_get_pdump_file(731,31390
inline int onvm_util_init_pacp_logger(757,32477
inline int onvm_util_clear_pcap_log(780,33833
inline int onvm_util_log_packets(804,35119
inline const char* onvm_util_close_and_get_pdump_file(836,36928
inline int onvm_util_replay_all_packets(852,37844
static inline int onvm_util_plain_pcap_replay(863,38180
static inline int onvm_util_plain_pcap_replay(965,43086
#define ENABLE_LOCAL_LATENCY_PROFILER977,43536
int onv_pkt_send_to_special_nf0(1037,46434
int process_special_nf0_rx_packets(1086,49108
int start_special_nf0(1204,54756
int stop_special_nf0(1255,56680

onvm_mgr/onvm_ft_install.h,36
#define _ONVM_FT_INSTALL_H_53,2425

onvm_mgr/onvm_gpu.c,605
static inline struct onvm_nf_info *shadow_nf(shadow_nf21,406
static void init_ml_models(32,745
void load_model(95,3270
void load_old_runtime_data(134,4875
void * provide_nf_with_model(195,6955
void restart_nf(204,7165
void nf_is_gpu_ready(213,7580
void compute_GPU_allocation(246,8982
float find_max_throughput(278,10382
int suggest_gpu_percentage(291,10889
void inform_NF_of_pending_restart(305,11552
void get_shadow_NF_ready(311,11723
void voluntary_restart_the_nf(329,12391
void init_zmq(346,12840
int send_message_to_orchestrator(357,13156
zmgr_msg *create_zmsg(create_zmsg368,13525

onvm_mgr/onvm_wakemgr.h,33
#define _ONVM_WAKEMGR_H_54,2360

onvm_mgr/onvm_args.c,592
volatile uint16_t num_nfs 60,2498
uint16_t num_services 63,2596
uint16_t default_service 66,2698
uint8_t is_static_clients;69,2799
ONVM_STATS_OUTPUT stats_destination 72,2887
uint16_t global_stats_sleep_time 75,3026
uint8_t global_verbosity_level 78,3148
static const char *progname;progname81,3219
#define USE_STATIC_IDS102,3541
parse_app_args(121,3908
usage(209,7437
parse_portmask(226,8301
parse_default_service(261,9359
parse_num_services(275,9661
parse_stats_sleep_time(288,9956
parse_stats_output(301,10266
parse_verbosity_level(317,10813
parse_num_clients(331,11155

onvm_mgr/onvm_zk_common.c,164
onvm_zk_create_if_not_exists(54,2347
onvm_zk_create_or_update(72,3009
zk_state_to_string(85,3443
zk_event_type_to_string(103,4029
zk_status_to_string(121,4599

onvm_mgr/onvm_zookeeper.h,764
#define ONVM_ZOOKEEPER_H_52,2339
#define ZK_SERVER 62,2539
#define ZK_CONNECT_ASYNC 64,2576
#define ZK_CONNECT_BLOCKING 65,2603
#define MGR_NODE_BASE 67,2634
#define MGR_NODE_FMT 68,2667
#define MGR_NODE_STR_FMT 69,2708
#define SERVICE_NODE_BASE 71,2748
#define SERVICE_NODE_FMT 72,2785
#define SERVICE_INSTANCE_FMT 73,2866
#define SERVICE_COUNT_FMT 74,2963
#define NF_NODE_BASE 76,3001
#define NF_SERVICE_BASE 77,3028
#define NF_STAT_CHILD_FMT 78,3103
#define NF_INSTANCE_FMT 79,3191
#define NF_STAT_FMT 80,3294
#define ZK_STAT_UPDATE_FREQ 81,3366
#define SCALE_QUEUE_BASE 82,3445
#define SCALE_QUEUE_FMT 83,3479
#define SCALE_DATA_FMT 84,3559
#define MAC_ADDR_FMT 86,3593
#define SCALE_RX_USE_MAX 87,3634
#define SCALE_TIMEOUT_SEC 88,3664

onvm_mgr/onvm_rsync.h,1821
#define _ONVM_RSYNC_H_53,2414
typedef struct rsync_stats 57,2569
        uint64_t tx_state_sync_pkt_counter;60,2700
        uint64_t nf_state_sync_pkt_counter[nf_state_sync_pkt_counter61,2744
        uint64_t tx_state_sync_in_pkt_counter;62,2797
        uint64_t nf_state_sync_in_pkt_counter[nf_state_sync_in_pkt_counter63,2844
        uint64_t transactions_out_counter;64,2900
        uint64_t transactions_in_counter;65,2943
        uint64_t enq_coun_tx_tx_state_latch_ring[enq_coun_tx_tx_state_latch_ring68,3093
        uint64_t drop_count_tx_tx_state_latch_ring[drop_count_tx_tx_state_latch_ring69,3161
        uint64_t enq_count_tx_nf_state_latch_ring[enq_count_tx_nf_state_latch_ring71,3232
        uint64_t drop_count_tx_nf_state_latch_ring[drop_count_tx_nf_state_latch_ring72,3301
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring77,3525
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring78,3626
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring80,3730
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring81,3832
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring83,3941
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring84,4012
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring86,4086
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring87,4158
        uint64_t enq_count_tx_port_ring[enq_count_tx_port_ring91,4246
        uint64_t drop_count_tx_port_ring[drop_count_tx_port_ring92,4305
}rsync_stats_t;rsync_stats_t94,4366
#define CHECK_IF_ANY_ONE_BIT_SET(98,4523

onvm_mgr/onvm_rsync.c,6259
#define NF_CHECKPOINT_PERIOD_IN_US 64,2776
#define TX_TS_CHECKPOINT_PERIOD_IN_US 65,2966
#define RSYNC_OUT_PORT 69,3425
#define RSYNC_USE_DPDK_TIMER72,3498
volatile uint8_t rx_halt 73,3527
#undef TX_TS_CHECKPOINT_PERIOD_IN_US76,3593
#define TX_TS_CHECKPOINT_PERIOD_IN_US 77,3630
#undef NF_CHECKPOINT_PERIOD_IN_US79,3684
#define NF_CHECKPOINT_PERIOD_IN_US 80,3718
#define MAX_PACKETS_IN_AVG_RTT_AT_HIGH_ARRV_RATE 89,4161
#define MAX_PACKETS_IN_A_ROUND 91,4356
#define MAX_PACKETS_IN_A_ROUND 93,4598
#define PACKET_READ_SIZE_LARGE 96,4860
#define CHECK_FOR_COMMIT_WITH_WAIT 99,5093
#define CHECK_FOR_COMMIT_WITH_NO_WAIT 100,5132
#define MAX_RSYNC_TRANSACTIONS 101,5174
#define REMOTE_SYNC_WAIT_INTERVAL 102,5247
#define MAX_TRANS_COMMIT_WAIT_COUNTER 103,5368
#define MAX_WAIT_TIME_FOR_TRANSACTION_COMMIT 104,5498
#define ENABLE_EXTRA_RSYNC_PRINT_MSGS108,5700
struct rte_timer tx_ts_checkpoint_timer;111,5746
struct rte_timer nf_status_checkpoint_timer;112,5787
#define NEED_REMOTE_TS_TABLE_SYNC 115,5899
#define NEED_REMOTE_NF_STATE_SYNC 116,5942
#define TX_TS_LATCH_BUFFER_FULL 117,5985
#define NF_STATE_LATCH_BUFFER_FULL 118,6028
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts dirty_state_map_tx_ts122,6142
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts dirty_state_map_tx_ts124,6217
static onvm_per_flow_ts_info_t   *tx_ts_table tx_ts_table126,6328
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db131,6504
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db133,6605
static onvm_per_flow_ts_info_t   *tx_ts_table_db[tx_ts_table_db135,6742
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db138,6866
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db140,6944
static onvm_per_flow_ts_info_t   *tx_ts_table_db tx_ts_table_db142,7058
#define DIRTY_MAP_PER_CHUNK_SIZE 149,7175
#define TXTS_DIRTY_MAP_CHUNK_SIZE 152,7319
#define MAX_TX_TS_ENTRIES 154,7440
#define TXTS_ENTRIES_PER_CHUNK 155,7554
#define MAX_TX_TS_ENTRIES 157,7688
#define TXTS_ENTRIES_PER_CHUNK 158,7797
typedef struct remote_node_config 161,7886
        uint8_t mac_addr_bytes[mac_addr_bytes162,7922
        uint32_t ip_addr;163,7970
}remote_node_config_t;remote_node_config_t164,7996
static remote_node_config_t rsync_node_info 165,8019
#define STATE_TYPE_TX_TS_TABLE 170,8182
#define STATE_TYPE_NF_MEMPOOL 171,8221
#define STATE_TYPE_SVC_MEMPOOL 172,8260
#define MSG_START_OF_REPLAY 173,8299
#define MSG_END_OF_REPLAY 174,8338
#define STATE_REQ_TO_RSP_LSH 175,8377
#define STATE_TYPE_TX_TS_ACK 176,8413
#define STATE_TYPE_NF_MEM_ACK 177,8506
#define STATE_TYPE_SVC_MEM_ACK 178,8599
#define STATE_TYPE_REQ_MASK 179,8693
#define STATE_TYPE_RSP_MASK 180,8732
#define MAX_STATE_SIZE_PER_PACKET 182,8772
typedef struct state_tx_meta 183,8815
        uint8_t state_type;184,8846
        uint8_t trans_id;185,8914
        uint8_t flags;186,8977
        uint8_t nf_or_svc_id;187,9075
        uint32_t start_offset;188,9155
} __attribute__((__packed__)) state_tx_meta_t;190,9299
#define STATE_FLAG_LAST_PACKET_MARKER 191,9346
typedef struct state_transfer_packet_hdr 193,9394
        state_tx_meta_t meta;194,9437
        uint8_t data[data195,9467
} __attribute__((__packed__)) state_transfer_packet_hdr_t;196,9516
typedef struct transfer_ack_packet_hdr 198,9576
        state_tx_meta_t meta;199,9617
} __attribute__((__packed__)) transfer_ack_packet_hdr_t;200,9647
rsync_stats_t rsync_stat;205,9821
uint8_t replay_mode;208,9922
static volatile uint8_t trans_queue[trans_queue211,9995
static onvm_time_t trans_ts[trans_ts212,10056
static uint8_t trans_notify[trans_notify214,10163
static inline void notify_ndsync_commit_to_blocked_NFs(243,11830
static int print_trans_status(269,13271
static int get_transaction_id(280,13531
static uint8_t log_transaction_id(296,14054
static uint8_t clear_transaction_id 313,14647
static uint8_t check_and_clear_elapsed_transactions(330,15193
static int rsync_wait_for_commit_ack(357,16809
static int rsync_wait_for_commit_acks(385,17814
tx_ts_checkpoint_timer_cb(441,19978
nf_status_checkpoint_timer_cb(447,20176
static inline int initialize_rsync_timers(475,21084
static void bswap_rsync_hdr_data(494,22078
inline int rsync_print_rsp_packet(509,22662
static struct rte_mbuf* craft_state_update_packet(520,23289
static int rsync_tx_ts_state_to_remote(564,25203
static int rsync_nf_state_to_remote(637,28913
static int rsync_tx_ts_state_from_remote(803,40148
static int rsync_nf_state_from_remote(823,41189
#define ENABLE_REPLAY_LATENCY_PROFILER837,42103
static onvm_interval_timer_t ts;839,42180
static int rsycn_handle_start_of_replay(841,42220
static int rsycn_handle_end_of_replay(850,42714
static inline uint64_t tx_ts_map_tag_index_to_dirty_chunk_bit_index(862,43366
static inline void tx_ts_update_dirty_state_index(871,43956
static inline int update_flow_tx_ts_table(903,45186
static inline int initialize_tx_ts_table(941,47259
static inline int send_packets_out(986,49361
static inline int log_transaction_and_send_packets_out(1023,50690
int transmit_tx_port_packets(1028,51059
static int transmit_tx_tx_state_latch_rings(1075,53251
static int transmit_tx_nf_state_latch_rings(1120,55329
static inline int get_flow_entry_index(1162,57124
static int extract_and_parse_tx_port_packets(1186,58283
static inline int rsync_process_req_packet(1338,66652
static inline int rsync_process_rsp_packet(1392,69292
int rsync_process_rsync_in_pkts(1411,70351
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1446,72409
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1448,72462
static int rsync_start_simple_pico_nf(1454,72654
static int rsync_start_simple_pico(1499,74721
static int rsync_start_simple(1538,76167
int rsync_start_only_db(1600,79015
static int rsync_start_simple_multi_db(1659,81667
static inline int rsync_start_simple_multi_db(1765,87144
static int rsync_start_simple_db(1916,94323
static int rsync_start_optimal_db(1999,98780
inline int rsync_start(2090,103971
int onvm_print_rsync_stats(2121,104763
int notify_replay_mode(2176,110478
rsync_main(2186,110931

onvm_mgr/onvm_zk_common.h,66
#define ONVM_ZK_COMMON_H_52,2340
#define RTE_LOGTYPE_ZK 56,2401

onvm_mgr/onvm_stats.h,1430
#define _ONVM_STATS_H_52,2320
#define ONVM_STR_STATS_STDOUT 60,2426
#define ONVM_STR_STATS_STDERR 61,2465
#define ONVM_STR_STATS_WEB 62,2504
#define ONVM_STATS_FOPEN_ARGS 64,2538
#define ONVM_STATS_PATH_BASE 65,2573
#define ONVM_JSON_STATS_FILE 66,2617
#define ONVM_STATS_FILE 67,2690
#define ONVM_JSON_PORT_STATS_KEY 69,2753
#define ONVM_JSON_NF_STATS_KEY 70,2804
#define ONVM_JSON_TIMESTAMP_KEY 71,2851
#define ONVM_SNPRINTF(73,2899
#define ONVM_RAW_STATS_DUMP 82,3494
        ONVM_STATS_NONE 85,3540
        ONVM_STATS_STDOUT,86,3569
        ONVM_STATS_STDERR,87,3596
        ONVM_STATS_WEB88,3623
} ONVM_STATS_OUTPUT;89,3646
cJSON* onvm_json_root;91,3668
cJSON* onvm_json_port_stats_arr;92,3691
cJSON* onvm_json_nf_stats_arr;93,3724
cJSON* onvm_json_port_stats[onvm_json_port_stats94,3755
cJSON* onvm_json_nf_stats[onvm_json_nf_stats95,3802
typedef struct onvm_stats_snapshot 98,3919
        uint64_t rx_delta;99,3956
        uint64_t tx_delta;100,4026
        uint64_t rx_drop_delta;101,4096
        uint64_t tx_drop_delta;102,4164
        uint32_t arrival_rate;103,4232
        uint32_t rx_rate;104,4306
        uint32_t serv_rate;105,4365
        uint32_t tx_rate;106,4424
        uint32_t rx_drop_rate;107,4498
        uint32_t tx_drop_rate;108,4564
}onvm_stats_snapshot_t;onvm_stats_snapshot_t109,4630
#define onvm_stats_clear_all_nfs 171,6443
#define onvm_stats_clear_nf(181,6662

onvm_mgr/onvm_zk_watch.c,25
onvm_zk_watcher(59,2461

onvm_nflib/onvm_gpu_buffer_factory.c,0
