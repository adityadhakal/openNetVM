
#include <stdio.h>
#include <cuda_runtime.h>
#include "onvm_stream.h"




stream_tracker streams_track[MAX_STREAMS];

/* initialize the streams  with no flags */
int init_streams(void){
  int i;
  //cudaError_t cuda_error;
  for(i = 0; i < MAX_STREAMS; i++){
    if(!DEFAULT_STREAM){
      //cuda_error = cudaStreamCreateWithFlags(&(streams_track[i].stream),cudaStreamNonBlocking);
    }
    else{
      streams_track[0].stream = 0;
    }
    streams_track[i].status = PARALLEL_EXECUTION;
    //    if(cuda_error != cudaSuccess){
      printf("Failed to Create Streams \n");
      return -1;
      //}
  }
  return 0;
}

long rr_counter;
int status_tracker[MAX_STREAMS];

/* if the stream is available, then the stream will return otherwise it will return NULL, the client need to figure out what to do then */
stream_tracker *give_stream(void){
  int i;
  int max = 0;
  int index;

  if(PARALLEL_EXECUTION>0){
    for(i = 0; i< MAX_STREAMS; i++){
      if(streams_track[i].status > max){
	max = streams_track[i].status;
	index = i;
      }
    }

    if(max){
      streams_track[index].status--; //decrement
      return &streams_track[index];
    }
    else{
      return NULL;
    }

      /*
      if(streams_track[i].status>0)
	{
	  streams_track[i].status--;
	  prev = i;
	  return &streams_track[i];
	  }
          
  } */
  }
  else{
      return &streams_track[(rr_counter++)%MAX_STREAMS];
    }
  return NULL;
}


/* makes stream available for use again */
void return_stream(stream_tracker * stream){
  stream->status++;
}

